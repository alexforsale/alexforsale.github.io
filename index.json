[{"content":"A Reusable Guix System Configuration Gnu Guix System has always been my favourite Linux operating system. It\u0026rsquo;s uses the Linux Libre kernel, uses a rolling release system for packages, and it\u0026rsquo;s a declarative operating system1. The init system itself is managed using GNU Shepherd init system.\nInstalling GNU Guix Using the manual installation Guix actually have a nice terminal interface for \u0026ldquo;graphical\u0026rdquo; installation. Later after the installation, you can edit the configuration file.\nBut apparently, the installer lacks the options to set manual IP address, so I have to use the manual installation.\nSetting the IP Address This is just standard Linux iproute2.\n1 ip addr add 10.80.1.94/24 dev eno16777736 Code Snippet 1: this will set the ip address We\u0026rsquo;ll also need to set the default route:\n1 ip route add default via 10.80.1.1 dev eno16777736 resolv.conf\nThis is needed to resolve domain names, edit the /etc/resolv.conf file\n1 2 nameserver 1.1.1.1 nameserver 1.0.0.1 Starting SSH service set the root password\n1 passwd root Herd service\n1 herd start sshd Usually for other linux distribution, this is enough to start SSH-ing from another machine. From Emacs I can start connecting using TRAMP, but GNU Guix has a unique file structure and Emacs TRAMP expect a common location for the ls program (which is usually located at /bin/), so I need to symlink the actual ls to /bin/.\n1 ln -sv /run/current-system/profile/bin/ls /bin/ls Now I can start connecting using Emacs.\nFigure 1: SSH from Emacs\nDisk Partitioning The machine is booted using UEFI, so I definitely need to create an EFI partition.\nFigure 2: EFI Partitioning\nAnd the rest will go to one partition.\nFigure 3: linux partition\nFormatting the partition\nThe EFI Partition\nWe\u0026rsquo;ll be using the mkfs tools\n1 mkfs.fat -F32 -n EFI /dev/sda1 The Linux partition\nWe\u0026rsquo;re using btrfs filesystem.\n1 mkfs.btrfs -L linux /dev/sda2 Figure 4: filesystem\nMounting the Disks\nFor btrfs first we\u0026rsquo;ll need to create the subvolumes, I won\u0026rsquo;t be using a complex subvolumes structure.\n1 mount -v LABEL=linux /mnt Code Snippet 2: Mounting the partition Figure 5: mounting the btrfs partition\n1 2 3 cd /mnt btrfs subvolume create guix-root btrfs subvolume create guix-root/home Code Snippet 3: creating subdirectories Figure 6: btrfs subvolumes\nUnmount the btrfs partition, and then mounting the subvolumes directory.\n1 2 3 4 5 cd / umount /mnt mount -v /dev/sda2 -o subvol=guix-root,compress-force=zstd,space_cache=v2 /mnt mkdir -pv /mnt/boot/efi mount -v /dev/sda1 /mnt/boot/efi Code Snippet 4: mounting subvolumes Figure 7: mounting subvolumes\nWe\u0026rsquo;ll also want to have a swapfile.\n1 2 3 cd /mnt/ btrfs subvolume create swap btrfs filesystem mkswapfile --size 4g ./swap/swapfile Code Snippet 5: creating swapfile We don\u0026rsquo;t actually need to mount it during the installation.\nProceeding with the installation Starting the herd cow-store service\n1 herd start cow-store /mnt Code Snippet 6: cow-store Figure 9: cow-store\nThe configuration file\nThis will be stored in mnt/etc/guix directory so it will carry on into the actual system.\nInitializing\n1 guix system init -L /mnt/etc/guix/guix-mkn /mnt/etc/guix/guix-mkn/guix-mkn/nigeria/system-configuration.scm /mnt https://guix.gnu.org/manual/en/html_node/Using-the-Configuration-System.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/modular-guix-system-configuration/","summary":"A Reusable Guix System Configuration Gnu Guix System has always been my favourite Linux operating system. It\u0026rsquo;s uses the Linux Libre kernel, uses a rolling release system for packages, and it\u0026rsquo;s a declarative operating system1. The init system itself is managed using GNU Shepherd init system.\nInstalling GNU Guix Using the manual installation Guix actually have a nice terminal interface for \u0026ldquo;graphical\u0026rdquo; installation. Later after the installation, you can edit the configuration file.","title":"Modular Guix System"},{"content":"Plugins Different approach than when I\u0026rsquo;m configuring Emacs, I start with listing all the plugins that I would use. The best part to look is usually at Awesome Neovim.\nPlugin management There\u0026rsquo;s a lot of options, for now I\u0026rsquo;ll try these first. lazy.nvim: features a graphical interface. activate.nvim: A plugin installation system designed to complement lazy.nvim. rocks.nvim: A modern approach to plugin management using Luarocks, inspired by Cargo. Completion nvim-cmp: A completion plugin written in Lua. New version of nvim-compe. cmp-under-comparator: A nvim-cmp function for better sorting. cmp-dotenv: Load environment variables from the shell or from your .env files. autocomplete.vim: Very simple and minimal autocompletion for cmdline and buffer using LSP and Tree-sitter with signature help. LSP This should be the first plugin to try. nvim-lspconfig: Quickstart configurations for the LSP client. Git neogit: An interactive and powerful Git interface for Neovim, inspired by Magit. Keybinding Stuffs which-key: Neovim plugin that shows a popup with possible keybindings of the command you started typing. better-escape: Create shortcuts to escape insert mode without getting delay. Comment Comment.nvim: Smart and Powerful comment plugin. Supports commentstring, motions, dot-repeat and more. Syntax nvim-surround: A plugin for adding/changing/deleting surrounding delimiter pairs. surround-ui: Helper or training aid for kylechui/nvim-surround. nvim-treesitter: Neovim Treesitter configurations and abstraction layer. nvim-treesitter-textobject: Create your own textobjects using tree-sitter queries. Tmux integration tmux.nvim: Tmux integration features pane movement and resizing. Formatting trim.nvim: This plugin trims trailing whitespace and lines. Editings nvim-ts-autotag: Use treesitter to autoclose and autorename xml,html,jsx tag. nvim-autopairs: autopairs for neovim written in lua. rainbow-delimiters.nvim: Rainbow delimiters for Neovim with Tree-sitter. auto-save.nvim: Automatically saves your work as often as needed and as seldom as possible. Customizable with smart defaults. nvim-bgf: Better quickfix window in Neovim, polish old quickfix window. The Configuration Plugin management This is the first stop.\n1 require(\u0026#34;config.lazy\u0026#34;) The actual plugin configuration\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 -- Bootstrap lazy.nvim local lazypath = vim.fn.stdpath(\u0026#34;data\u0026#34;) .. \u0026#34;/lazy/lazy.nvim\u0026#34; if not (vim.uv or vim.loop).fs_stat(lazypath) then local lazyrepo = \u0026#34;https://github.com/folke/lazy.nvim.git\u0026#34; vim.fn.system({ \u0026#34;git\u0026#34;, \u0026#34;clone\u0026#34;, \u0026#34;--filter=blob:none\u0026#34;, \u0026#34;--branch=stable\u0026#34;, lazyrepo, lazypath }) end vim.opt.rtp:prepend(lazypath) -- Make sure to setup `mapleader` and `maplocalleader` before -- loading lazy.nvim so that mappings are correct. -- This is also a good place to setup other settings (vim.opt) vim.g.mapleader = \u0026#34; \u0026#34; vim.g.maplocalleader = \u0026#34;\\\\\u0026#34; -- Setup lazy.nvim require(\u0026#34;lazy\u0026#34;).setup({ spec = { -- import your plugins { import = \u0026#34;plugins\u0026#34; }, }, -- Configure any other settings here. See the documentation for more details. -- colorscheme that will be used when installing plugins. install = { colorscheme = { \u0026#34;habamax\u0026#34; } }, -- automatically check for plugin updates checker = { enabled = true }, }) ","permalink":"https://alexforsale.github.io/posts/configuring-neovim/","summary":"Plugins Different approach than when I\u0026rsquo;m configuring Emacs, I start with listing all the plugins that I would use. The best part to look is usually at Awesome Neovim.\nPlugin management There\u0026rsquo;s a lot of options, for now I\u0026rsquo;ll try these first. lazy.nvim: features a graphical interface. activate.nvim: A plugin installation system designed to complement lazy.nvim. rocks.nvim: A modern approach to plugin management using Luarocks, inspired by Cargo. Completion nvim-cmp: A completion plugin written in Lua.","title":"Configuring NeoVim"},{"content":"Things That I\u0026rsquo;ve Done / Currently Doing Literate Configurations These repositories are configured in org-mode, and the actual configuration codes are stored inside the documentation noweb-style, and then \u0026ldquo;tangled\u0026rdquo; into the actual file(s).\nliterate emacs Emacs configuration file. dotfiles-shells Common shells configuration / startup files. Designed to serve POSIX-compliant shells that I used (bash, zsh, dash/ash/sh, and tcsh) on various machines. dotfiles-bash Bash startup files, configured mostly for command-line applications that I used. dotfiles-hyprland A fully autonomous Display Server for linux, considered to be an Xorg replacement. This repository stores the configuration files. It matured enough to be my daily window manager. dotfiles-apps Collection of configuration for various applications, usualy it stays in this repository until it warrant a separate repository for the app. Others braindump My attempt at creating a zettelkasten-like personal knowledge management using org-mode and hugo. Still needs tweaking to make it works, and I\u0026rsquo;m considering other options. ","permalink":"https://alexforsale.github.io/projects/","summary":"Things That I\u0026rsquo;ve Done / Currently Doing Literate Configurations These repositories are configured in org-mode, and the actual configuration codes are stored inside the documentation noweb-style, and then \u0026ldquo;tangled\u0026rdquo; into the actual file(s).\nliterate emacs Emacs configuration file. dotfiles-shells Common shells configuration / startup files. Designed to serve POSIX-compliant shells that I used (bash, zsh, dash/ash/sh, and tcsh) on various machines. dotfiles-bash Bash startup files, configured mostly for command-line applications that I used.","title":"Projects"},{"content":"This will be a part of a series on my rust-learning journey. The goal of this post is to document my process of creating a simple program that determine if the number given is a perfect number1. And also list the perfect number until the given number.\nImports 1 use std::io; This is the common input / output modules.\nFunction to determine the perfect number 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 fn is_perfect_number(n: i32) -\u0026gt; bool { let mut sum: i32 = 1; let mut i: i32 = 2; while i * i \u0026lt;= n { if n % i == 0 { sum = sum + i + n / i; } i += 1; } if sum == n \u0026amp;\u0026amp; n != 1 { return true } else { return false } } This will calculate if the number is a perfect number or not.\nFunction to list all the perfect number 1 2 3 4 5 6 7 8 9 fn perfect_number_list(n: i32) -\u0026gt; Vec\u0026lt;i32\u0026gt;{ let mut numbers: Vec\u0026lt;i32\u0026gt; = vec![]; for num in 1..n { if is_perfect_number(num) { numbers.push(num); } } return numbers; } This will calculate all the perfect number up to the given number. The return type is a vector, which is a resizeable arrays in rust. It size is unknown at compile time, and it can shrink or grow at any time.\nThe main function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 fn main() { println!(\u0026#34;Input a number!\\n\u0026#34;); let mut input_number = String::new(); io::stdin() .read_line(\u0026amp;mut input_number) .expect(\u0026#34;failed to read input.\u0026#34;); let x: i32 = input_number .trim() .parse() .expect(\u0026#34;Not an integer\u0026#34;); println!(\u0026#34;Your input is: {}\u0026#34;, x); if is_perfect_number(x) { println!(\u0026#34;{} is a perfect number\u0026#34;, x) } else { println!(\u0026#34;{} is not a perfect number\u0026#34;, x) } println!(\u0026#34;Input a number!\\n\u0026#34;); let mut number_range = String::new(); io::stdin() .read_line(\u0026amp;mut number_range) .expect(\u0026#34;Failed to read input.\u0026#34;); let y: i32 = number_range .trim() .parse() .expect(\u0026#34;Not an integer\u0026#34;); print!(\u0026#34;The perfect number from 1 to {} is: \u0026#34;, y); for element in \u0026amp;perfect_number_list(y) { print!(\u0026#34;{} \u0026#34;, element); } println!(); // for whitespace } There\u0026rsquo;s alot going on here:\nReading user input I\u0026rsquo;m sure there are packages that simplify this process, but when I\u0026rsquo;m learning new programming languages I try to stick with the builtins first. But basically it goes like this:\nString::new It creates an empty string. I don\u0026rsquo;t actually know if all stdin should be treated as string. io::stdin From the std::io module. .readline The actual reading. The \u0026amp;mut before the variable input_number means it is a mutable reference to the variable input_number. .expect In case the input is not a string. The conversion from string to integer is done by declaring it into another variable and:\n.trim clear the whitespaces if any. .parse parsing it into another type, in this case i32, and lastly, .expect Guard it in case it is a different type The rest of this main function is by using the two functions earlier.\nThe Whole Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 use std::io; fn is_perfect_number(n: i32) -\u0026gt; bool { let mut sum: i32 = 1; let mut i: i32 = 2; while i * i \u0026lt;= n { if n % i == 0 { sum = sum + i + n / i; } i += 1; } if sum == n \u0026amp;\u0026amp; n != 1 { return true } else { return false } } fn perfect_number_list(n: i32) -\u0026gt; Vec\u0026lt;i32\u0026gt;{ let mut numbers: Vec\u0026lt;i32\u0026gt; = vec![]; for num in 1..n { if is_perfect_number(num) { numbers.push(num); } } return numbers; } fn main() { println!(\u0026#34;Input a number!\\n\u0026#34;); let mut input_number = String::new(); io::stdin() .read_line(\u0026amp;mut input_number) .expect(\u0026#34;failed to read input.\u0026#34;); let x: i32 = input_number .trim() .parse() .expect(\u0026#34;Not an integer\u0026#34;); println!(\u0026#34;Your input is: {}\u0026#34;, x); if is_perfect_number(x) { println!(\u0026#34;{} is a perfect number\u0026#34;, x) } else { println!(\u0026#34;{} is not a perfect number\u0026#34;, x) } println!(\u0026#34;Input a number!\\n\u0026#34;); let mut number_range = String::new(); io::stdin() .read_line(\u0026amp;mut number_range) .expect(\u0026#34;Failed to read input.\u0026#34;); let y: i32 = number_range .trim() .parse() .expect(\u0026#34;Not an integer\u0026#34;); print!(\u0026#34;The perfect number from 1 to {} is: \u0026#34;, y); for element in \u0026amp;perfect_number_list(y) { print!(\u0026#34;{} \u0026#34;, element); } println!(); // for whitespace } This is the running code.\nFigure 1: the code in action\nhttps://en.wikipedia.org/wiki/Perfect_number\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/learning-rust/","summary":"This will be a part of a series on my rust-learning journey. The goal of this post is to document my process of creating a simple program that determine if the number given is a perfect number1. And also list the perfect number until the given number.\nImports 1 use std::io; This is the common input / output modules.\nFunction to determine the perfect number 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 fn is_perfect_number(n: i32) -\u0026gt; bool { let mut sum: i32 = 1; let mut i: i32 = 2; while i * i \u0026lt;= n { if n % i == 0 { sum = sum + i + n / i; } i += 1; } if sum == n \u0026amp;\u0026amp; n !","title":"learning Rust Series: Perfect Number"},{"content":" Table of Contents How I mapped my brain to org-mode Basically what I want is The 5 Steps from David Allen\u0026rsquo;s GTD Method Capture Clarify Organize Reflect Engage What I will need References Using org-mode Keybindings Specific org-mode variables org-directory and org-agenda-files org-archive-location org-todo-keywords Priority Tags Deadlines and Schedules Time-stamp Deadline Schedule The Agenda view. Configuring org-agenda-custom-commands Refiling and archiving Archiving Refiling Things of interest Using org-capture Capturing with templates Things of interest Synchronization, Capture Methods and everything else org-mode extensions Evil-mode org-fancy-priorities org-modern builtin packages saveplace savehist various files configuration How I mapped my brain to org-mode Lately I found that I am in dire need of an effective task management system as an IT support. There are some days where everything is hectic and I\u0026rsquo;m lost prioritizing my assignments. There\u0026rsquo;s moment where I was in the middle of doing one task, and suddenly another request / assignment came out of nowhere (not exactly nowhere, but you get the idea). Task management system is also useful for creating some kind of reporting, although this is not the main goal.\nInitially, this post was titled Getting Things Done in Emacs. But as I keep adding more information into this post, and how I interact with org-mode and Emacs in general, it was about capturing my thought process. Tasks is one thing, and the important one since that\u0026rsquo;s what I\u0026rsquo;m paid for. But there are stuffs floating around in my brain that I want to keep on exploring. By storing all that impulses into text, hopefully I could understand more on how my thought process work.\nI\u0026rsquo;ve known about the Getting Things Done method for a while now, even though I don\u0026rsquo;t actively trying to mimic the workflow. subconsciously I created my own workflow that (more and less) similar.\nThe more I try to update this post the more I realised that my mind operates in such a non-linear way. I was thinking of updating a section of this post, but suddenly an idea came into my mind about tweaking other sections of the post, I don\u0026rsquo;t know if this is a good thing or not\u0026hellip;\nI promise one day this post will make sense (to me most especially).\nBasically what I want is daily planner. Simple UI for task highlighting or focusing. automation or templating for capturing tasks. reviewing Sync between Laptop, PC, and android The 5 Steps from David Allen\u0026rsquo;s GTD Method Capture Empty your mind Clarify Describe Organize Place it where it belongs Reflect Reflect on your progress Engage Take action Capture Our minds are for having ideas, not for holding them.\nEach capture should produce just one headline. Try not to use the word and and or into a headline. Put a line below write every thing that\u0026rsquo;s on my head at the time of capturing process.\nDumping every ideas into text should be avoided. Not everything should go into the system, only add what I really need. Separate each capture into categories, tasks, notes, ideas, or other information that I took interest of. Since it\u0026rsquo;s necessary to me, I also separate my personal tasks/notes/ideas using tag. This is the first step of my workflow, and this is not necessarily about Emacs. I try to capture everything that interest me, or things that need my attention.\nA request came via E-mail, messaging apps, phone calls, or in person. An interesting book about meditation that requires a dedicated time to read. A topic about GNU/Linux from a debian mailing list (yes, silent reader here, but I still read it). As it seems, I don\u0026rsquo;t really need to capture it immediately into my inbox file, though it\u0026rsquo;s better, as long as I have some kind of media to note them.\nMail messages have their received date and time. So do every messaging apps known to man. In-person requests / inquiries time doesn\u0026rsquo;t have to be precise to the minutes. Clarify Create sub tasks if needed. Reading a hierarchy of lists is better than reading a long line of text. Since I made these notes for me, I should understand it just by looking at them. But still every details count, especially product-related information (type, serial numbers, conditions etc).\nAnother important details are date, time, and location. These are usually tasks related to meetings, appointments and such.\nThis is also the first step to decide whether a tasks is considered a project. When I encounter tasks that take prolonged time of actions, and would create another task, I put it in the :project: category.\nFor every other captures that doesn\u0026rsquo;t require any actions, I tried to collect as much information as possible. It could be a link to some internet articles that I\u0026rsquo;ve already collected, but somehow I forgot, it\u0026rsquo;d be nice if I knew the reason why I capture it in the first place. So the second time I encounter it I can immediately decide if it worth keeping.\nOrganize Use org-refile to organize your inbox file.\nA further sorting of all the lists I\u0026rsquo;ve acquired. Including all that I\u0026rsquo;ve captured previously. This phase is where I separate my tasks (actionable) with information, notes, links etc (non-actionable).\nI usually don\u0026rsquo;t trash any of my notes, if I made mistakes, it was my mistakes and I can (hopefully) learn from it.\nReflect A deeper inspection of my org-agenda view. I should have an agenda view that shows everything happening for the current day, all the tasks that hasn\u0026rsquo;t yet completed, and all prioritized tasks for the upcoming week. Within the org-agenda, I can decide what tasks should I do first and mark them in-progress (PROG), what should I do next (:schedule: or :deadline: them if necessary).\nI\u0026rsquo;m still contemplating on having a separate org-agenda view for weekly. The problem is it really took a mental energy to view them and make decisions about a large inventory of open loops. Ath the moment I only set them for prioritized / scheduled / deadline tasks.\nEngage Take action. Useful questions:\nContext is this the right context for this action? Priority Is this the most important / impactful activity? Energy Do I have enough energy to do this? Time Do I have enough time to do this? What I will need Time This is basically building a habit, fortunately since I\u0026rsquo;ve used Emacs for a while now, this is nothing strange to me. Keep It Simple My Emacs configuration is already bloated enough, also the reason why I use vanilla Emacs to build this system. References https://medium.com/praxis-blog/building-a-second-brain-in-emacs-and-org-mode-faa20ae06fc https://fortelabs.com/blog/para/ https://fortelabs.com/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/ https://www.float.com/resources/getting-things-done-method/ Using org-mode An Emacs nerd as I am, of course the first stop is org-mode. Please forgive this messy chart since I\u0026rsquo;m still learning on plantuml.\nI really want to try from the ground up, using a vanilla Emacs with no interference from my actual configuration file1. First of all, we need to set the minimal keybinding suggested by the manual:\nKeybindings 1 2 3 4 (global-set-key (kbd \u0026#34;C-c l\u0026#34;) #\u0026#39;org-store-link) (global-set-key (kbd \u0026#34;C-c a\u0026#34;) #\u0026#39;org-agenda) (global-set-key (kbd \u0026#34;C-c c\u0026#34;) #\u0026#39;org-capture) (global-set-key (kbd \u0026#34;C-c C\u0026#34;) #\u0026#39;org-capture-goto-last-stored) Code Snippet 1: suggested keybindings Specific org-mode variables org-directory and org-agenda-files Next is set the org-directory, this directory is going to be the location of org-mode files, well, you are free to place an org-mode files anywhere, but think of this as the root location, so every customizations we\u0026rsquo;ll be making will refers to this location, for example, if we want to define our org-agenda-files as agenda.org inside the org-directory, we\u0026rsquo;ll use:\n1 (setq org-directory (expand-file-name \u0026#34;org\u0026#34; user-emacs-directory)) Code Snippet 2: set the location of org-directory inside user-emacs-directory Usually you\u0026rsquo;ll want your org-directory to be separated from your user-emacs-directory, which mostly be under some kind of version control system (such as git). The simplest location is just on the root of your home-directory\n1 (setq org-directory (expand-file-name \u0026#34;org\u0026#34; (getenv \u0026#34;HOME\u0026#34;))) ;; ~/org/ Code Snippet 3: set the location of org-directory on the root of your home directory Assuming your user-emacs-directory is in ~/.emacs.d~, then your org-directory is ~/.emacs.d/org\n1 (setq org-agenda-files (list org-directory)) Code Snippet 4: set the location of org-agenda-files org-archive-location org-archive-location is another variable that I should consider, will I want an archiving method? If I do, where should I put it? Is storing archived task (the done, cancelled etc) in a designated file necessary?\n1 (setq org-archive-location (concat (expand-file-name \u0026#34;archives.org\u0026#34; org-directory) \u0026#34;::datetree/* Archived Tasks\u0026#34;)) Code Snippet 5: An example of setting the org-archive-location to a file archives.org inside the org-directory org-todo-keywords The org-todo-keywords also need to be customized, the default keywords are just TODO, and DONE. I\u0026rsquo;ve thought of this for a while, and perhaps this will suffice:\nTable 1: my todo keywords TODO Keyword What it is TODO Tasks that are not started, also not planned. There can be many of them. NEXT Tasks that are planned to do immediately. WAIT Tasks that needs other form of interaction in order for it to be set as PROG or DONE or KILL. PROG Tasks that are actively in working progress, these are usually the kind of tasks that can be done by myself, or have gone through the WAIT phase. Which also means that this can also revert back to WAIT. HOLD The kind of tasks that suspended without an escalation (these things happens im my workplace). These TODO keywords are the ones that (supposed) to have further actions. I only have three keywords with no further actions:\nTable 2: keywords with no further actions TODO keyword What it is DONE GG, well played! DELEGATED I got someone else doing my job, GG, well played! KILL Cancelled, or my boss gave me a task beyond my paygrade Translate these into Emacs Lisp:\n1 2 (setq org-todo-keywords \u0026#39;((sequence \u0026#34;TODO(t!)\u0026#34; \u0026#34;NEXT(n!)\u0026#34; \u0026#34;PROG(p!)\u0026#34; \u0026#34;WAIT(w!)\u0026#34; \u0026#34;HOLD(h!)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(d!)\u0026#34; \u0026#34;DELEGATED(l!)\u0026#34; \u0026#34;KILL(k!)\u0026#34;))) Code Snippet 6: defining my own org-todo-keywords each character inside the parentheses are the fast state selection, when you use C-c C-t in a heading, you only have to type the character to select the keyword. ~~ means to record the time of state changes. 1 2 ​* TODO test ​- State \u0026#34;TODO\u0026#34; from [2024-03-14 Thu 22:10] Code Snippet 7: example of state changes log Priority Prioritizing tasks is important in my daily routines. And I would like to quickly identify the priority of all the tasks I have in my hand.\n1 2 3 4 5 6 7 8 9 (setq org-priority-highest ?A org-priority-lowest ?D org-priority-default ?B) (setq org-priority-faces \u0026#39;((?A . (:foreground \u0026#34;#bf616a\u0026#34; :weight bold :underline t)) (?B . (:foreground \u0026#34;#d08770\u0026#34; :weight bold :underline t)) (?C . (:foreground \u0026#34;#4c566a\u0026#34; :weight bold :underline t)) (?D . (:foreground \u0026#34;#3b4252\u0026#34; :weight bold :underline t)))) Code Snippet 8: org-priority setup This will set a list of priority from A to D, the default keybinding is C-c ,.\nTags Another useful way to implement labels and contexts for headlines, in org-mode tags must be preceeded and followed by a single colon (:), for example :work:, several tags can be specified, as in :work:urgent. Although I don\u0026rsquo;t use tags that often, there are several variables that I should customize:\n1 2 (setq org-use-tag-inheritance t org-tags-exclude-from-inheritance \u0026#39;(\u0026#34;crypt\u0026#34;)) The first one should be obvious, I want my sub-level headlines to inherit the tags from their parent headline. the second one is the tag that should not be inherited. The :crypt: tag is usually used for tagging headlines that contains password etc. The default keybinding for inserting tag is C-c C-c when the point is in the headline, or C-c C-q when under a headline.\nDeadlines and Schedules Time-stamp In org-mode it\u0026rsquo;s a timestamp with a special keywords. Adding timestamp can be done with C-c . inside a heading, to insert an inactive timestamp (that doesn\u0026rsquo;t show in org-agenda) use C-c !. This will only insert date, to also insert time, use a C-u prefix (e.g. C-u C-c . or C-u C-c !).\nDeadline The default keybinding is C-c C-d. Meaning the heading, with a keyword (can be TODO or any other), is supposed to be finished at that date. Use C-u C- C-d to remove a deadline from the heading.\n1 2 3 * TODO test DEADLINE: \u0026lt;2024-03-14 Thu\u0026gt; - State \u0026#34;TODO\u0026#34; from [2024-03-14 Thu 22:10] Code Snippet 9: TODO task with a deadline There are also different syntax for the date:\nDEADLINE: \u0026lt;2024-03-14 Thu -3d\u0026gt; means a warning with the period of 3 days, Schedule Meaning that I\u0026rsquo;m planning to start doing the tasks at that date. The default keybinding is C-c C-s, use C-u C-c C-s to remove a schedule from a heading.\n1 2 3 * TODO test SCHEDULED: \u0026lt;2024-03-16 Sat 09:00\u0026gt; - State \u0026#34;TODO\u0026#34; from [2024-03-14 Thu 22:10] Code Snippet 10: TODO task with a schedule Just as deadline, a different syntax also available:\nSCHEDULED: \u0026lt;2024-03-16 Sat 10:00 -2d\u0026gt; means to delay the display of this task in the agenda for 2 day. The task is still scheduled on the 16th. The Agenda view. org-mode has a builtin agenda. The default Agenda views will show informations of:\nAgenda for the current week or day, with the default key a. List of all TODO entries, key t. Matching queries of tags, properties, or TODO keywords. With the key m. s, search for keywords. / for multi-occur (never tried this). ? for finding flagged entries. * for toggling sticky agenda views. n for all agendas and TODOs. The agenda view is what I use the most for reviewing all my tasks, luckily there\u0026rsquo;s a package called dashboard that also display several items from your agenda.\nFigure 1: my dashboard\nFigure 2: Vanilla Emacs org-agenda\nConfiguring org-agenda-custom-commands This is the meat of my workflow, so I should have the information I want with just pressing each keyword.\nViewing the custom agenda\ntoday\u0026rsquo;s section\nThis will show on the top of my custom agenda view, showing today\u0026rsquo;s tasks.\n1 2 3 4 5 6 7 8 9 10 (setq org-agenda-custom-commands `((\u0026#34;w\u0026#34; \u0026#34;work\u0026#34; ((agenda \u0026#34;\u0026#34; ((org-agenda-span 1) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-scheduled-past-days 0) (org-agenda-day-face-function (lambda (date) \u0026#39;org-agenda-date)) (org-agenda-format-date \u0026#34;%A %-e %B %Y\u0026#34;) (org-agenda-overriding-header \u0026#34;\\nToday\u0026#39;s Agenda\\n\u0026#34;))))))) org-agenda-span : number of days to include in overview display, default to 'week.\norg-deadline-warning-days : Number of days before expiration during which a deadline becomes active, default to 14.\norg-agenda-use-time-grid : Non-nil means show a time grid in agenda schedule.\norg-scheduled-past-days : Number of days to continue listing scheduled items not marked DONE.\norg-agenda-format-date : formatting for the date.\nThis Will create a custom view w, with the first section marked \u0026ldquo;Today\u0026rdquo;, the \\n is for inserting new line:\nFigure 3: today\u0026rsquo;s view\nIncomplete tasks section\nUseful to remind me for tasks that has not yet completed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 (setq org-agenda-custom-commands `((\u0026#34;w\u0026#34; \u0026#34;work\u0026#34; ((agenda \u0026#34;\u0026#34; ((org-agenda-span 1) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-scheduled-past-days 0) (org-agenda-day-face-function (lambda (date) \u0026#39;org-agenda-date)) (org-agenda-format-date \u0026#34;%A %-e %B %Y\u0026#34;) (org-agenda-overriding-header \u0026#34;\\nToday\u0026#39;s Agenda\\n\u0026#34;))) (tags-todo \u0026#34;*\u0026#34; ((org-agenda-block-separator nil) (org-agenda-skip-function \u0026#39;(org-agenda-skip-if-todo \u0026#39;nottodo \u0026#39;done)) (org-agenda-use-time-grid nil) (org-agenda-overriding-header \u0026#34;\\nIncomplete\\n\u0026#34;))))))) Code Snippet 11: Incomplete tasks section addition This second section is filtered by tags (though it matches everything from tags, properties, and TODO keywords). The expression \u0026quot;*\u0026quot; means match all keywords.\nThe other notable filter is the org-agenda-skip-function, this will only show tasks that matches from the function '(org-agenda-skip-entry-if'nottodo 'done), which as its name suggest, skip entry if TODO keyword is not the type 'done (the keywords on the right side of the | as defined here).\nFigure 4: incomplete section\nNext three days section\nUseful to get a head start of tasks for the coming days. I used to set it for the coming week, but I\u0026rsquo;d like to stay focused.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 (setq org-agenda-custom-commands `((\u0026#34;w\u0026#34; \u0026#34;work\u0026#34; ((agenda \u0026#34;\u0026#34; ((org-agenda-span 1) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-scheduled-past-days 0) (org-agenda-day-face-function (lambda (date) \u0026#39;org-agenda-date)) (org-agenda-format-date \u0026#34;%A %-e %B %Y\u0026#34;) (org-agenda-overriding-header \u0026#34;\\nToday\u0026#39;s Agenda\\n\u0026#34;))) (agenda \u0026#34;\u0026#34; ((org-agenda-start-on-weekday nil) (org-agenda-start-day \u0026#34;+1d\u0026#34;) (org-agenda-span 3) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-skip-function \u0026#39;(org-agenda-skip-entry-if \u0026#39;todo \u0026#39;done)) (org-agenda-overriding-header \u0026#34;\\nNext three days\\n\u0026#34;))) (tags-todo \u0026#34;*\u0026#34; ((org-agenda-block-separator nil) (org-agenda-skip-function \u0026#39;(org-agenda-skip-if-todo \u0026#39;nottodo \u0026#39;done)) (org-agenda-use-time-grid nil) (org-agenda-overriding-header \u0026#34;\\nIncomplete\\n\u0026#34;))))))) I inserted the \u0026ldquo;Next three days\u0026rdquo; section in between the \u0026ldquo;Incomplete\u0026rdquo;.\nFigure 5: next 3 days\nSection for upcoming deadlines\nThis will show all the tasks with a deadline for the next 14 days, but starting at the 4th day, since the next three days already has it section.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 (setq org-agenda-custom-commands `((\u0026#34;w\u0026#34; \u0026#34;work\u0026#34; ((agenda \u0026#34;\u0026#34; ((org-agenda-span 1) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-scheduled-past-days 0) (org-agenda-day-face-function (lambda (date) \u0026#39;org-agenda-date)) (org-agenda-format-date \u0026#34;%A %-e %B %Y\u0026#34;) (org-agenda-overriding-header \u0026#34;\\nToday\u0026#39;s Agenda\\n\u0026#34;))) (agenda \u0026#34;\u0026#34; ((org-agenda-start-on-weekday nil) (org-agenda-start-day \u0026#34;+1d\u0026#34;) (org-agenda-span 3) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-skip-function \u0026#39;(org-agenda-skip-entry-if \u0026#39;todo \u0026#39;done)) (org-agenda-overriding-header \u0026#34;\\nNext three days\\n\u0026#34;))) (tags-todo \u0026#34;*\u0026#34; ((org-agenda-block-separator nil) (org-agenda-skip-function \u0026#39;(org-agenda-skip-if-todo \u0026#39;nottodo \u0026#39;done)) (org-agenda-use-time-grid nil) (org-agenda-overriding-header \u0026#34;\\nIncomplete\\n\u0026#34;))) (agenda \u0026#34;\u0026#34; ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) ;; We don\u0026#39;t want to replicate the previous section\u0026#39;s ;; three days, so we start counting from the day after. (org-agenda-start-day \u0026#34;+4d\u0026#34;) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-entry-types \u0026#39;(:deadline)) (org-agenda-skip-function \u0026#39;(org-agenda-skip-entry-if \u0026#39;todo \u0026#39;done)) (org-agenda-overriding-header \u0026#34;\\nUpcoming deadlines (+14d)\\n\u0026#34;))))))) Code Snippet 12: upcoming deadlines Figure 6: the modified org-agenda-custom-commands\nNow I have a view of my daily, weekly agenda, and list of incomplete tasks. I can easily move into each tasks with pressing RET (ENTER) at each task.\nSeparation of work and personal tasks\nI personally don\u0026rsquo;t use org-agenda for anything else beside my work stuffs. But occasionally there\u0026rsquo;s things that I put in my org files that are not work-related. For me, the easiest solution is just to use org-tags for all my personal tasks and use org-agenda-tag-filter in my agenda.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 (setq org-agenda-custom-commands `((\u0026#34;w\u0026#34; \u0026#34;work\u0026#34; ((agenda \u0026#34;\u0026#34; ((org-agenda-span 1) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-scheduled-past-days 0) (org-agenda-day-face-function (lambda (date) \u0026#39;org-agenda-date)) (org-agenda-format-date \u0026#34;%A %-e %B %Y\u0026#34;) (org-agenda-overriding-header \u0026#34;\\nToday\u0026#39;s Agenda\\n\u0026#34;))) (agenda \u0026#34;\u0026#34; ((org-agenda-start-on-weekday nil) (org-agenda-start-day \u0026#34;+1d\u0026#34;) (org-agenda-span 3) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-skip-function \u0026#39;(org-agenda-skip-entry-if \u0026#39;todo \u0026#39;done)) (org-agenda-overriding-header \u0026#34;\\nNext three days\\n\u0026#34;))) (tags-todo \u0026#34;*\u0026#34; ((org-agenda-block-separator nil) (org-agenda-skip-function \u0026#39;(org-agenda-skip-if-todo \u0026#39;nottodo \u0026#39;done)) (org-agenda-use-time-grid nil) (org-agenda-overriding-header \u0026#34;\\nIncomplete\\n\u0026#34;))) (agenda \u0026#34;\u0026#34; ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) ;; We don\u0026#39;t want to replicate the previous section\u0026#39;s ;; three days, so we start counting from the day after. (org-agenda-start-day \u0026#34;+4d\u0026#34;) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-entry-types \u0026#39;(:deadline)) (org-agenda-skip-function \u0026#39;(org-agenda-skip-entry-if \u0026#39;todo \u0026#39;done)) (org-agenda-overriding-header \u0026#34;\\nUpcoming deadlines (+14d)\\n\u0026#34;)))) ((org-agenda-tag-filter-preset \u0026#39;(\u0026#34;-personal\u0026#34; \u0026#34;-home\u0026#34;)))))) Code Snippet 13: filter by tag the \u0026quot;-personal\u0026quot; and \u0026quot;-home\u0026quot; means to filter out every headlines with the tag personal, and home, if you have many of them, just create another agenda view with that filter in reverse, using +personal or +home\nFigure 7: upcoming deadlines\nStuck Projects\nIn org-mode term, a stuck project is a project (identified as a header) that has no defined next action, so it never shows up in the TODO list. The default value is:\n1 2 3 4 (setq org-stuck-projects \u0026#39;(\u0026#34;+LEVEL=2/-DONE\u0026#34; (\u0026#34;TODO\u0026#34; \u0026#34;NEXT\u0026#34; \u0026#34;NEXTACTION\u0026#34;) nil \u0026#34;\u0026#34;)) Code Snippet 14: default org-stuck-projects It is a list with four items:\na tag/todo/property matching a project. a list of todo keywords identifying non-stuck projects. a list of tags identifying non-stuck projects. a regular expression matching non stuck projects. The default means that a project is a level 2 headlines with the tag PROJECT but not if it has a todo keyword MAYBE and DONE, and will not be considered a stuck project if it has a todo keyword TODO, NEXT, or NEXTACTION, the third and fourth item is nil so it has no tag filter and no regular expression matcher for non-stuck projects.\nSo I simply just use the tag project for tasks that I considered as a project. Using the org-todo-keywords that I already setup earlier, my org-stuck-projects is:\n1 2 3 (setq org-stuck-projects \u0026#39;(\u0026#34;+{project*}-killed-Archives/-DONE-KILL-DELEGATED\u0026#34; (\u0026#34;TODO\u0026#34; \u0026#34;NEXT\u0026#34; \u0026#34;IDEA\u0026#34; \u0026#34;PROG\u0026#34;) nil \u0026#34;\u0026#34;)) Code Snippet 15: my org-stuck-projects Then you can use org agenda to list all the stuck project with the key #, or with the command M-x org-agenda #.\nRefiling and archiving Eventually, the org-files used in my workflow will grow larger. So I will also need to move the previous tasks, refiling them into separate categories or even separate file. And also archiving them so they won\u0026rsquo;t clutter my agenda views, and also keep my org-agenda faster without having to check all those completed tasks.\nArchiving The main goal is to keep my main inbox file (the first entry of tasks) empty as soon as possible. This is where org-archive comes handy. The flow that I have in mind is to create a monthly file, perhaps in a headline consisting of YYYY/MM structure. The refiled entries are still monitored by org-agenda. I\u0026rsquo;d like to have some kind of agenda view for these files for reviewing purpose, perhaps maybe exporting them to different formats.\n1 (setq org-archive-location (concat org-directory \u0026#34;/archive.org::datetree/* Archived Tasks\u0026#34;)) Code Snippet 16: my org-archive setup This will set the archive location to a file named archives.org inside my org-directory, and within a first level headline named \u0026ldquo;Archived Tasks\u0026rdquo;\nRefiling Still with the goal of having an unclutter inbox file, I\u0026rsquo;m using org-refile feature to move tasks from my inbox into another file, mainly for tasks that need (or waiting for) several steps to complete. Mostly though, I use org-refile in order to categorize my tasks, for examples I prefer to put tasks that are related to projects (in term of my work project), into a file named projects.org inside my org-directory, and routine tasks into routines.org, and my personal stuffs in personal.org\n1 2 3 4 5 6 (setq org-refile-targets `((,(expand-file-name \u0026#34;projects.org\u0026#34; org-directory) :maxlevel . 1) (,(expand-file-name \u0026#34;routines.org\u0026#34; org-directory) :maxlevel . 1) (,(expand-file-name \u0026#34;personal.org\u0026#34; org-directory) :maxlevel . 1)) org-refile-use-outline-path \u0026#39;file org-outline-path-complete-in-steps nil) Code Snippet 17: my org-refile setup org-refile-use-outline-path this is set to 'file to provide the file name as the refile target. Necessary since I\u0026rsquo;m using multiple files. org-outline-path-complete-in-steps set to nil so the completions won\u0026rsquo;t be set per step (filename -\u0026gt; headlines). Just to speed up the process. :maxlevel limits the level of headlines considered to be a target. A max level of 1 means only the top-level headlines. This also means that all the targets above can be set into one file (e.g. refile.org), and create a top-level headlines as the categories. We\u0026rsquo;ll also need to add a hook to make sure that the target buffer is saved after the refiling process.\n1 (add-hook \u0026#39;org-after-refile-insert-hook #\u0026#39;save-buffer) Code Snippet 18: refile hook Things of interest Exporting org-agenda to thunderdbird I use thunderbird, and also have setup my thunderbird calendar to sync my Outlook calendars using davmail. Using org-capture Of course all of the above would be useless if I have to manually create a task. At least I would like to have an org-capture template to make this easier.\n1 2 3 4 5 (require \u0026#39;org-capture) (setq org-capture-templates `((\u0026#34;i\u0026#34; \u0026#34;Inbox\u0026#34; entry (file+headline ,(expand-file-name \u0026#34;inbox.org\u0026#34; org-directory) \u0026#34;Inbox\u0026#34;) \u0026#34;** %?\\n%i\\n%a\u0026#34; :prepend t :jump-to-captured t))) Code Snippet 19: org-capture-templates Capturing with templates Let say there are some entries that usually have a similar format, we can provide a template for those entries. Name this request.template and put it inside the org-directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ** TODO %? :PROPERTIES: :USER: %^{User} :UNIT: %^{Unit|MKN|GMN|STN} :DATE: %T :LOCATION: :CATEGORY: %^{Category|Meeting|Purchase|Repair|Assistance|Tech Issue|Complaints|Account Management} :REQUEST_VIA: %^{Request via|In Person|Phone/Messaging|Mail} :ITEM: %^{Item} :QTY: %^{Quantity|1} :LINK: %a :END: :LOGBOOK: - State \u0026#34;TODO\u0026#34;\tfrom\t%U :END: *** Requirements - [ ] Escalation - [ ] Approval - [ ] Vendor This will create a template for a 2nd level heading, with org properties and a logbook drawer. But we also need some inputs:\n%^{User} prompt for User. %^{Category|Meeting|Purchage|Repair|Assistance} Prompt for input with predefined values. %a Annotation, normally the link created with org-store-link. %U inactive timestamp for state tracking, only needed for the first time, will be updated automatically every time there\u0026rsquo;s a state change. list started with [ ] means that it\u0026rsquo;s a checkbox list, we can change the state to [x] using C-c C-c.\n1 2 3 (add-to-list \u0026#39;org-capture-templates `(\u0026#34;r\u0026#34; \u0026#34;Request\u0026#34; entry (file+headline ,(expand-file-name \u0026#34;inbox.org\u0026#34; org-directory) \u0026#34;Request\u0026#34;) (file ,(expand-file-name \u0026#34;request.template\u0026#34; org-directory)))) Code Snippet 20: the org-capture-templates Figure 9: org-capture with a predefined template\nFigure 10: the content of the template\nFigure 11: Prompt with completion\nFigure 12: content of the capture target\nThings of interest Using context-aware capture-templates the link is not just about org-capture. Synchronization, Capture Methods and everything else I mainly use syncthing for synchronizing my org-directory across my devices. It has support for android, on which I use orgzly mostly for viewing the org files. Once you\u0026rsquo;ve set the repository inside orgzly to point to org-directory (which already synced by syncthing), you\u0026rsquo;re ready to go. Also don\u0026rsquo;t forget to match the todo keywords with the one you\u0026rsquo;ve set in Emacs. The downside is you cannot attach to the org-file while in orgzly.\nAnd, depending on your android version, syncthing cannot sync properly on some filesystems. So it\u0026rsquo;s better to store your sync directory on the device internal storage than the external one. With that being said, I am still exploring other possibilities:\ngoogle\u0026rsquo;s keep I never got the comfort of typing or navigating with my finger on a touchscreen. And to me, Android is such a mess by trying to pick comfort over functionality. Google Keep is the one app that (was) very simple and the only one app that I still consider a Google App. I can sync a note between my phone and my pc, I can also attach media to it (try taking photos of 41 printers of the same model, and guess each location, etc). But here comes the new UI updates\u0026hellip; Firefox There used to be an editor war, now it just plain war. Now I just use Firefox just because I choose to use Firefox. org-protocol allows me to capture a link in Firefox into org-mode just by using a bookmark.\nFigure 14: org-protocol capture\nThis allows me to easily insert links into my org-capture.\norg-mode extensions Although all the configuration listed above is enough for my task management workflow, there are many packages for Emacs (builtin or external) to enhance your org-mode experience. Here are some of them:\nEvil-mode I made a separate post for this package. If you\u0026rsquo;re coming from Vim, this is mandatory. If you\u0026rsquo;re not, try the default Emacs keybindings first, if your pinky fingers are not long enough, try this package.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 (use-package evil :ensure t :init (setq evil-want-integration t) ;; This is optional since it\u0026#39;s already set to t by default. (setq evil-want-keybinding nil) :config (evil-mode 1)) (use-package evil-collection :after evil :ensure t :config (evil-collection-init) (with-eval-after-load \u0026#39;org-agenda (evil-set-initial-state #\u0026#39;org-agenda-mode \u0026#39;normal) (evil-define-key \u0026#39;(normal visual) org-agenda-mode-map \u0026#34;q\u0026#34; \u0026#39;org-agenda-quit \u0026#34;Q\u0026#34; \u0026#39;org-agenda-quit (kbd \u0026#34;\u0026lt;return\u0026gt;\u0026#34;) \u0026#39;org-agenda-switch-to \u0026#34;t\u0026#34; \u0026#39;org-agenda-todo \u0026#34;gr\u0026#34; \u0026#39;org-agenda-redo-all))) Code Snippet 21: recommended evil configuration org-fancy-priorities 1 2 3 4 5 6 (use-package org-fancy-priorities :ensure t :hook (org-mode . org-fancy-priorities-mode) :config (setq org-fancy-priorities-list \u0026#39;(\u0026#34;⚡\u0026#34; \u0026#34;⬆\u0026#34; \u0026#34;⬇\u0026#34; \u0026#34;☕\u0026#34;))) Figure 15: image from their readme page\norg-modern This package implements a modern style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks. The styling is configurable, you can enable, disable or modify the style of each syntax element individually via the org-modern customization group.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 (use-package org-modern :ensure t :init (menu-bar-mode -1) (tool-bar-mode -1) (scroll-bar-mode -1) (load-theme \u0026#39;modus-vivendi t) :config (set-face-attribute \u0026#39;org-modern-symbol nil :family \u0026#34;Iosevka Nerd Font\u0026#34;) (set-face-attribute \u0026#39;default nil :family \u0026#34;Iosevka Nerd Font Mono\u0026#34;) (set-face-attribute \u0026#39;variable-pitch nil :family \u0026#34;Iosevka Nerd Font Mono\u0026#34;) (modify-all-frames-parameters \u0026#39;((right-divider-width . 40) (internal-border-width . 40))) (dolist (face \u0026#39;(window-divider window-divider-first-pixel window-divider-last-pixel)) (face-spec-reset-face face) (set-face-foreground face (face-attribute \u0026#39;default :background))) (set-face-background \u0026#39;fringe (face-attribute \u0026#39;default :background)) (setq ;; Edit settings org-auto-align-tags nil org-tags-column 0 org-catch-invisible-edits \u0026#39;show-and-error org-special-ctrl-a/e t org-insert-heading-respect-content t ;; Org styling, hide markup etc. org-hide-emphasis-markers t org-pretty-entities t org-ellipsis \u0026#34;…\u0026#34; ;; Agenda styling org-agenda-tags-column 0 org-agenda-block-separator ?─ org-agenda-time-grid \u0026#39;((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) \u0026#34; ┄┄┄┄┄ \u0026#34; \u0026#34;┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\u0026#34;) org-agenda-current-time-string \u0026#34;◀── now ─────────────────────────────────────────────────\u0026#34;) (global-org-modern-mode)) Code Snippet 22: org-modern configuration (mainly from their github page) Figure 17: org-modern agenda\nbuiltin packages saveplace 1 2 3 4 5 (use-package saveplace :init (save-place-mode 1) :custom (save-place-file (expand-file-name \u0026#34;places\u0026#34; user-emacs-directory))) When you visit a file, point goes to the last place where it was when you previously visited the save file.\nsavehist Save the minibuffer history\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 (use-package savehist :init (savehist-mode 1) :custom (savehist-file (expand-file-name \u0026#34;history\u0026#34; user-emacs-directory)) (savehist-coding-system \u0026#39;utf-8) (savehist-additional-variables \u0026#39;(evil-jumps-history kill-ring register-alist mark-ring global-mark-ring search-ring regexp-search-ring))) various files configuration 1 2 3 4 5 6 7 8 9 10 11 (use-package files :custom (find-file-visit-truename t) (version-control t) (backup-by-copying t) (delete-old-versions t) (kept-new-versions 6) (kept-old-versions 2) (auto-save-include-big-deletions t) (auto-save-list-file-prefix (expand-file-name \u0026#34;.autosave/\u0026#34; user-emacs-directory)) (backup-directory-alist `((\u0026#34;.\u0026#34; . ,(expand-file-name \u0026#34;.backup\u0026#34; user-emacs-directory))))) find-file-visit-truename if the visited file is a symlink, it will find the truename of the file instead. version-control make numeric backup versions unconditionally. backup-by-copying always use copying to create backup files. delete-old-versions delete excess backup versions silently By using another instance of Emacs, but with a specific command arguments:\n1 emacs --init-directory=/dev/null This will ensure Emacs is started with no user configuration.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/org-mode-workflow/","summary":"Table of Contents How I mapped my brain to org-mode Basically what I want is The 5 Steps from David Allen\u0026rsquo;s GTD Method Capture Clarify Organize Reflect Engage What I will need References Using org-mode Keybindings Specific org-mode variables org-directory and org-agenda-files org-archive-location org-todo-keywords Priority Tags Deadlines and Schedules Time-stamp Deadline Schedule The Agenda view. Configuring org-agenda-custom-commands Refiling and archiving Archiving Refiling Things of interest Using org-capture Capturing with templates Things of interest Synchronization, Capture Methods and everything else org-mode extensions Evil-mode org-fancy-priorities org-modern builtin packages saveplace savehist various files configuration How I mapped my brain to org-mode Lately I found that I am in dire need of an effective task management system as an IT support.","title":"Org Mode Workflow"},{"content":"What is a terminal multiplexer? let wikipedia do the talking:\nA terminal multiplexer is a software application that can be used to multiplex several separate pseudoterminal-based login sessions inside a single terminal display, terminal emulator window, PC/workstation system console, or remote login session, or to detach and reattach sessions from a terminal. It is useful for dealing with multiple programs from a command line interface, and for separating programs from the session of the Unix shell that started the program, particularly so a remote process continues running even when the user is disconnected.\nIn a way, it\u0026rsquo;s just like a window manager, only it\u0026rsquo;s in text. And as far as I know, only two of them really stands out: GNU Screen and Tmux.\nMy interaction with GNU Screen. In my early linux years, I was the Gnome guy, back when Gnome is just Gnome, no 2 or 3. For me back then, screen or tmux is kind of useless. Why use another program when I can just CTRL-SHIFT-T and create a new tab in my Gnome Terminal? Only later when I started tinkering LinuxFromScratch and Gentoo I realized:\nIt\u0026rsquo;s sucks having just 6 TTY. Especially when you forgot which one is chrooted and which is not (yes, there\u0026rsquo;s a command to change the prompt, but who does that?).\nFrom the memory usage point of view, it\u0026rsquo;s trivial. After all it just a pseudo-terminal. But consider this:\nYou can have multiple terminals shown at once, in a split. Or, multiple terminals like a buffer in Emacs or Vim. You can copy and paste text from one terminal into another, when I\u0026rsquo;m installing archlinux, I have a screen with one terminal doing the installation, and another one opening links or lynx (terminal web browser, they have those as well) viewing the Archlinux installation page. When connecting to a remote machine, via SSH, by using screen or tmux in the remote machine, you can easily detach or reattach to a running session. No more disconnection worry. It also means you can connect to a remote machine from one client, opening application in it, detach, and reattach from a different client. This is not a tutorial on how to use screen or tmux (in screen type C-a ? to get you started). I suppose the question is \u0026ldquo;should I use screen or tmux?\u0026rdquo; And I\u0026rsquo;m not going to answer that either.\n","permalink":"https://alexforsale.github.io/posts/terminal-multiplexer/","summary":"What is a terminal multiplexer? let wikipedia do the talking:\nA terminal multiplexer is a software application that can be used to multiplex several separate pseudoterminal-based login sessions inside a single terminal display, terminal emulator window, PC/workstation system console, or remote login session, or to detach and reattach sessions from a terminal. It is useful for dealing with multiple programs from a command line interface, and for separating programs from the session of the Unix shell that started the program, particularly so a remote process continues running even when the user is disconnected.","title":"Using Terminal Multiplexer"},{"content":"Background I\u0026rsquo;m spending most of my long vacation reorganizing my github repositories, archiving some old repos (mostly android stuffs that I don\u0026rsquo;t use anymore). And when I\u0026rsquo;m looking into my dotfiles repos I remember once I\u0026rsquo;ve tried to use literate programming to manage them. I think one of the difficulties I had was editing the source code block inline.\n1 2 3 4 This is how shell code block looks like in /Emacs/ #+begin_src sh echo true #+end_src Editing code blocks inline has many disadvantages, for one, indentation is quite tricky. You\u0026rsquo;ll never know the whitespaces until you tangled them. I\u0026rsquo;m sure there are solutions for this problems, but for now I just org-edit-special (bound to C-c ').\nFigure 1: using org-edit-special\nReorganizing my repositories Right now, I\u0026rsquo;m doing my dotfiles1 one by one, and I\u0026rsquo;ve come to realize how unmaintainable they are now. Basically, dotfiles are user-specific configuration files. While reorganizing them I saw configuration that are outdated, unneeded, or just plain wrong. I keep small configuration together in one repository (e.g. if it\u0026rsquo;s X11-related, or wayland-specific, or just shell init files). Some of them have grown big enough to have their own separate repository.\nUsing github-action to create each page on github My goal is to have a self-documenting page for each repositories. Not too detailed to be a wiki, just a reminder for me, or anyone who happens to see it. Another nice thing is that the about section in the github repository page can automatically link the page.\nFigure 2: Github Pages\nWhat I\u0026rsquo;ve done Emacs The first thing I did. It give me the opportunity to rework my configuration, and the github workflows I use in this repository is going to be my worfklow template for other repository2.\nFigure 3: the page generated by github-action\nMy Todo List TODO My GNU Guix configuration This distribution always have a special place in my mind. And Guile scheme is such an elegant language. I\u0026rsquo;d like to use it someday if I got the time.\nDONE Shell initialization files Done migrating all the files3.\nPROG Miscellaneous Applications Still migrating, some application(s) may need its own separate repository4.\nDONE Xorg files Various X11 related files, done migrating5.\nPROG I3-wm configuration Still in progress, took some time because at the moment I\u0026rsquo;m using Hyprland in wayland. But the repository is already migrated6.\nsee https://github.com/alexforsale, I\u0026rsquo;ll pinned all my dotfiles once it finished.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nthe repository is here if you\u0026rsquo;re curious, and here\u0026rsquo;s the page.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/alexforsale/dotfiles-shells\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/alexforsale/dotfiles-apps\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/alexforsale/dotfiles-x\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/alexforsale/dotfiles-i3\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/literate-configuration/","summary":"Background I\u0026rsquo;m spending most of my long vacation reorganizing my github repositories, archiving some old repos (mostly android stuffs that I don\u0026rsquo;t use anymore). And when I\u0026rsquo;m looking into my dotfiles repos I remember once I\u0026rsquo;ve tried to use literate programming to manage them. I think one of the difficulties I had was editing the source code block inline.\n1 2 3 4 This is how shell code block looks like in /Emacs/ #+begin_src sh echo true #+end_src Editing code blocks inline has many disadvantages, for one, indentation is quite tricky.","title":"Literate Configuration with Emacs"},{"content":"Blogging with org-mode I do almost all my note-taking in Emacs org-mode, so naturally I also prefer to write my blog posts in it. As for my ox-hugo blogging flow, I use the less preferred method: one org file per post, the consequence is I cannot just copy-paste the org capture setup provided by the doc site. I also setup my posts in a subdirectory beneath the HUGO_BASE_DIR:\n1 tree -n .. Code Snippet 1: my content directory 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 .. ├── about │ └── about.org ├── archives.org ├── emacs-avy │ ├── avy.gif │ └── emacs-avy.org ├── emacs-builtin-use-package │ ├── emacs-builtin-use-package.org │ ├── prefix-key.png │ └── which-key-mode.png ├── emacs-evil │ └── emacs-evil.org ├── emacs-general │ └── emacs-general.org ├── emacs-sane-defaults │ ├── default-emacs.png │ ├── emacs-after.png │ ├── emacs-dired.png │ ├── emacs-eshell.png │ ├── emacs-sane-defaults.org │ └── emacs-tetris.png ├── emacs-shell │ ├── emacs-shell.org │ ├── eshell-command-form.png │ ├── eshell-elisp-form.png │ └── eshell.png ├── emacs-version-control │ ├── emacs-magit-status.png │ └── emacs-version-control.org ├── emacs-vertico │ ├── consult-buffer.png │ ├── consult-flymake.png │ ├── consult-outline.png │ ├── consult-yank-pop.png │ ├── corfu-completion.png │ ├── emacs-vertico.org │ ├── emacs-vertico.png │ ├── emacs-without-vertico.png │ ├── marginalia-describe-variable.png │ ├── marginalia-files.png │ ├── marginalia-find-file-with-icons.png │ ├── nerd-icons-corfu.png │ ├── orderless-default.png │ ├── vertico-buffer-mode.png │ ├── vertico-flat-mode.png │ ├── vertico-grid-mode.png │ ├── vertico-indexed-mode.png │ ├── vertico-quick.png │ └── vertico-reverse-mode.png ├── github-action-hugo-emacs │ ├── action-secrets-and-variables.png │ ├── deploy-github.png │ └── github-action-hugo-emacs.org ├── hugo-blogging-org-capture-templates │ └── hugo-blogging-org-capture-templates.org ├── hyprland │ ├── hyprland.org │ └── hyprland.png ├── notmuch-mail-emacs │ ├── full.png │ └── notmuch-mail-emacs.org ├── search.org └── theming-emacs ├── default-emacs.png ├── emacs-doom-theme-modeline-and-dashboard.png ├── emacs-wombat.png └── theming-emacs.org 15 directories, 53 files Custom org-capture-templates First off, org-capture-templates is just like its name; it is a template for creation of new entries. It is used by org-mode, which is a killer feature of Emacs. Initially it was design to capture notes with little interruption1. But since it was all Emacs Lisp, we can modify it with ease.\nbasic template 1 2 3 4 5 (setq org-capture-templates \u0026#39;((\u0026#34;t\u0026#34; \u0026#34;Todo\u0026#34; entry (file+headline \u0026#34;~/org/gtd.org\u0026#34; \u0026#34;Tasks\u0026#34;) \u0026#34;* TODO %?\\n %i\\n %a\u0026#34;) (\u0026#34;j\u0026#34; \u0026#34;Journal\u0026#34; entry (file+datetree \u0026#34;~/org/journal.org\u0026#34;) \u0026#34;* %?\\nEntered on %U\\n %i\\n %a\u0026#34;))) Code Snippet 2: from the manual org-capture-templates is a list of:\nkeys in the example, t is for todo entry and j is for journal. description usually a one-liner describing what kind of capture the key is. type the type of the entry, here entry is an org node with a headline. target where the capture should be placed. template the template itself2. So I need to tweak it a bit in order to automatically create a file within a subdirectory in my blog content (using the same name to make it easier). Not only that, ox-hugo use an org meta-data for hugo front-matter3. Each new files created must be started with these metadata (at minimal):\n1 2 3 4 5 6 7 8 9 10 11 12 #+options: \u0026#39;:nil -:nil ^:{} num:nil toc:nil #+author: Kristian Alexander P #+creator: Emacs 29.2 (Org mode 9.6.15 + ox-hugo) #+hugo_section: posts #+hugo_base_dir: ../../ #+date: \u0026lt;2024-03-03 Sun\u0026gt; #+title: Hugo blog org-capture-templates #+description: My blogging workflow #+hugo_tags: hugo emacs org #+hugo_categories: emacs #+hugo_auto_set_lastmod: t #+startup: inlineimages Code Snippet 3: ox-hugo metadata Some metadata will be different for each capture; title, description, hugo_tags, and hugo_categories. dates should be set as the capture date, the other will be needing a user input, including the filename, for the org-capture process.\nThose will be set as the template part. As for the target, I\u0026rsquo;m using a simple Emacs Lisp function:\n1 2 3 4 5 (defun +config/create-new-blog-post () \u0026#34;Create new blog post path.\u0026#34; (interactive) (let ((name (read-string \u0026#34;Filename: \u0026#34;))) (concat +config/blog-directory \u0026#34;/content-org/\u0026#34; (format \u0026#34;%s\u0026#34; name) \u0026#34;/\u0026#34; (format \u0026#34;%s.org\u0026#34; name)))) Code Snippet 4: my targeting function This function is just a basic input/output; it will ask for a file name, and then it will concatenate it as a valid file path, here subtituted as a variable +config/blog-directory\n1 2 3 (when (file-directory-p (expand-file-name \u0026#34;alexforsale.github.io\u0026#34; org-directory)) (customize-set-variable \u0026#39;+config/blog-directory (expand-file-name \u0026#34;alexforsale.github.io\u0026#34; org-directory))) Code Snippet 5: the variable definition Basically it will look for a directory named \u0026ldquo;alexforsale.github.io\u0026rdquo; (it\u0026rsquo;s my github-page repository) inside the variable org-directory, which is also should be set.\nThe actual template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;b\u0026#34; \u0026#34;(b)log post\u0026#34; plain (file +config/create-new-blog-post) \u0026#34;\\ #+options: \u0026#39;:nil -:nil ^:{} num:nil toc:nil #+author: %n #+creator: Emacs %(eval emacs-version) (Org mode %(eval org-version) + ox-hugo) #+hugo_section: posts #+hugo_base_dir: ../../ #+date: %t #+title: %^{title} #+hugo_draft: true #+description: %^{description} #+hugo_tags: %^{tags} #+hugo_categories: %^{categories} #+hugo_auto_set_lastmod: t #+startup: inlineimages\\n%?\u0026#34; :unnarrowed t :jump-to-captured t)) Code Snippet 6: my capture template This will create a draft post, to publish it set the draft to false. Some template expansions I use:\n%n this will expand to the variable user-full-name. %t date. %^{title}, %{description}, %^{tags}, and %^{categories} will prompt for the user for each metadata. \\n is for newline. %? will be the point location. Usually, org-capture is not bound to any keys, the recommended way is to bind it to C-c c4. So to use this template the keybinding is C-c c b.\n1 2 3 (global-set-key (kbd \u0026#34;C-c l\u0026#34;) #\u0026#39;org-store-link) (global-set-key (kbd \u0026#34;C-c a\u0026#34;) #\u0026#39;org-agenda) (global-set-key (kbd \u0026#34;C-c c\u0026#34;) #\u0026#39;org-capture) Code Snippet 7: the recommended keybindings Preview hugo blog locally Before pushing each commits to my github repository, I\u0026rsquo;d view my blog in my local machine, With hugo this can be done by running:\n1 hugo server --buildDrafts --navigateToChanged Code Snippet 8: hugo server from within the HUGO_BASE_DIR directory. This can be done from a terminal emulator, or, since I\u0026rsquo;m using Emacs, I can run it using async-shell-command, which is actually shell-command, but adds a \u0026amp; at the end of the command to run it asynchronously.\n1 (async-shell-command \u0026#34;hugo server --buildDrafts --navigateToChanged \u0026amp;\u0026#34; \u0026#34;*hugo*\u0026#34; \u0026#34;*hugo-error*\u0026#34;) Code Snippet 9: running hugo server within emacs The *hugo* argument is the output-buffer, and *hugo-error* is the error-buffer. But since the hugo server command has many other flags, I use an external package called transient5 to toggle each flags.\n1 hugo server --help Code Snippet 10: hugo server help 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 Hugo provides its own webserver which builds and serves the site. While hugo server is high performance, it is a webserver with limited options. \u0026#39;hugo server\u0026#39; will by default write and server files from disk, but you can render to memory by using the \u0026#39;--renderToMemory\u0026#39; flag. This can be faster in some cases, but it will consume more memory. By default hugo will also watch your files for any changes you make and automatically rebuild the site. It will then live reload any open browser pages and push the latest content to them. As most Hugo sites are built in a fraction of a second, you will be able to save and see your changes nearly instantly. Usage: hugo server [command] [flags] hugo server [command] Aliases: server, serve Available Commands: trust Install the local CA in the system trust store. Flags: --appendPort append port to baseURL (default true) -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/ --bind string interface to which the server will bind (default \u0026#34;127.0.0.1\u0026#34;) -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory --cleanDestinationDir remove files from destination not found in static directories -c, --contentDir string filesystem path to content directory --disableBrowserError do not show build errors in the browser --disableFastRender enables full re-renders on changes --disableKinds strings disable different kind of pages (home, RSS etc.) --disableLiveReload watch without enabling live browser reload on rebuild --enableGitInfo add Git revision, date, author, and CODEOWNERS info to the pages --forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, --help help for server --ignoreCache ignores the cache directory -l, --layoutDir string filesystem path to layout directory --liveReloadPort int port for live reloading (i.e. 443 in HTTPS proxy situations) (default -1) --minify minify any supported output format (HTML, XML etc.) --navigateToChanged navigate to changed content file on live browser reload --noBuildLock don\u0026#39;t create .hugo_build.lock file --noChmod don\u0026#39;t sync permission mode of files --noHTTPCache prevent HTTP caching --noTimes don\u0026#39;t sync modification time of files --panicOnWarning panic on first WARNING log --poll string set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes -p, --port int port on which the server will listen (default 1313) --pprof enable the pprof server (port 8080) --printI18nWarnings print missing translations --printMemoryUsage print memory usage to screen at intervals --printPathWarnings print warnings on duplicate target paths etc. --printUnusedTemplates print warnings on unused templates. --renderStaticToDisk serve static files from disk and dynamic files from memory --templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, --theme strings themes to use (located in /themes/THEMENAME/) --tlsAuto generate and use locally-trusted certificates. --tlsCertFile string path to TLS certificate file --tlsKeyFile string path to TLS key file --trace file write trace to file (not useful in general) -w, --watch watch filesystem for changes and recreate as needed (default true) Global Flags: --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00 --config string config file (default is hugo.yaml|json|toml) --configDir string config dir (default \u0026#34;config\u0026#34;) --debug debug output -d, --destination string filesystem path to write files to -e, --environment string build environment --ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern --logLevel string log level (debug|info|warn|error) --quiet build in quiet mode --renderToMemory render to memory (mostly useful when running the server) -s, --source string filesystem path to read files relative from --themesDir string filesystem path to themes directory -v, --verbose verbose output Use \u0026#34;hugo server [command] --help\u0026#34; for more information about a command. Then I just use transient-define-prefix to create the command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 (use-package transient :config (transient-define-prefix +config/transient-hugo-server () \u0026#34;Run hugo server with `transient\u0026#39;.\u0026#34; :man-page \u0026#34;hugo-server\u0026#34; [\u0026#34;Options\u0026#34; (\u0026#34;q\u0026#34; \u0026#34;quit\u0026#34; transient-quit-all) (\u0026#34;-D\u0026#34; \u0026#34;Build drafts\u0026#34; \u0026#34;--buildDrafts\u0026#34;) (\u0026#34;-E\u0026#34; \u0026#34;Build expired\u0026#34; \u0026#34;--buildExpired\u0026#34;) (\u0026#34;-F\u0026#34; \u0026#34;Build future\u0026#34; \u0026#34;--buildFuture\u0026#34;) (\u0026#34;-d\u0026#34; \u0026#34;Debug\u0026#34; \u0026#34;--debug\u0026#34;) (\u0026#34;-B\u0026#34; \u0026#34;Disable build errors on browser\u0026#34; \u0026#34;--disableBrowserError\u0026#34;) (\u0026#34;-c\u0026#34; \u0026#34;Clean destination dir\u0026#34; \u0026#34;--cleanDestinationDir\u0026#34;) (\u0026#34;-e\u0026#34; \u0026#34;Enable Git info\u0026#34; \u0026#34;--enableGitInfo\u0026#34;) (\u0026#34;-F\u0026#34; \u0026#34;enable full re-renders on changes\u0026#34; \u0026#34;--disableFastRender\u0026#34;) (\u0026#34;-f\u0026#34; \u0026#34;Force sync static files\u0026#34; \u0026#34;--forceSyncStatic\u0026#34;) (\u0026#34;-g\u0026#34; \u0026#34;enable to run some cleanup tasks\u0026#34; \u0026#34;--gc\u0026#34;) (\u0026#34;-m\u0026#34; \u0026#34;Minify any supported output format\u0026#34; \u0026#34;--minify\u0026#34;) (\u0026#34;-C\u0026#34; \u0026#34;No chmod\u0026#34; \u0026#34;--noChmod\u0026#34;) (\u0026#34;-T\u0026#34; \u0026#34;Don\u0026#39;t sync modification time of files\u0026#34; \u0026#34;--noTimes\u0026#34;) (\u0026#34;-I\u0026#34; \u0026#34;Print missing translation\u0026#34; \u0026#34;--printI18nWarnings\u0026#34;) (\u0026#34;-M\u0026#34; \u0026#34;Print memory usage\u0026#34; \u0026#34;--printMemoryUsage\u0026#34;) (\u0026#34;-P\u0026#34; \u0026#34;Print warning on duplicate target path\u0026#34; \u0026#34;--printPathWarnings\u0026#34;) (\u0026#34;-q\u0026#34; \u0026#34;Quiet\u0026#34; \u0026#34;--quiet\u0026#34;) (\u0026#34;-v\u0026#34; \u0026#34;Verbose\u0026#34; \u0026#34;--verbose\u0026#34;) (\u0026#34;-w\u0026#34; \u0026#34;Watch filesystem for changes\u0026#34; \u0026#34;--watch\u0026#34;)] [\u0026#34;Action\u0026#34; (\u0026#34;s\u0026#34; \u0026#34;hugo server\u0026#34; +config/start-hugo-server)])) Code Snippet 11: install transient with use-package and define our hugo server command, see their showcase to learn how to use transient. I use this heavily in the past. Note that the \u0026ldquo;Action\u0026rdquo; (s) is +config/start-hugo-server which we need to define:\n1 2 3 4 5 6 7 8 (defun +config/start-hugo-server (args) \u0026#34;Start hugo server in `+config/blog-directory\u0026#39;.\u0026#34; (interactive (list (transient-args \u0026#39;+config/transient-hugo-server))) (if (not (executable-find \u0026#34;hugo\u0026#34;)) (message \u0026#34;hugo executable not found\u0026#34;) (let ((default-directory +config/blog-directory) (command \u0026#34;hugo server\u0026#34;)) (async-shell-command (mapconcat #\u0026#39;identity `(,command ,@args) \u0026#34; \u0026#34;) \u0026#34;*hugo*\u0026#34; \u0026#34;*hugo-error*\u0026#34;)))) Code Snippet 12: the function This function will run hugo server, with additional args which will be provided by the transient command.\nthe mapconcat will apply the first argument to each element of the second arguments, for example:\n1 (mapconcat #\u0026#39;identity \u0026#39;(\u0026#34;abc\u0026#34; \u0026#34;def\u0026#34; \u0026#34;ghi\u0026#34;) \u0026#34;. \u0026#34;) Code Snippet 13: mapconcat example 1 \u0026#34;abc. def. ghi\u0026#34; the identity simply returns the arguments unchanged.\nFigure 1: transient in action\nhttps://orgmode.org/manual/Capture-templates.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://orgmode.org/manual/Template-expansion.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://ox-hugo.scripter.co/doc/org-meta-data-to-hugo-front-matter/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://orgmode.org/org.html#Activation-1\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee the manual for transient\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/hugo-blogging-org-capture-templates/","summary":"Blogging with org-mode I do almost all my note-taking in Emacs org-mode, so naturally I also prefer to write my blog posts in it. As for my ox-hugo blogging flow, I use the less preferred method: one org file per post, the consequence is I cannot just copy-paste the org capture setup provided by the doc site. I also setup my posts in a subdirectory beneath the HUGO_BASE_DIR:\n1 tree -n .","title":"Hugo blog org-capture-templates"},{"content":"Magit Magit is a complete text-based user interface to Git. It fills the glaring gap between the Git command-line interface and various GUIs, letting you perform trivial as well as elaborate version control tasks with just a couple of mnemonic key presses. Magit looks like a prettified version of what you get after running a few Git commands but in Magit every bit of visible information is also actionable to an extent that goes far beyond what any Git GUI provides and it takes care of automatically refreshing this output when it becomes outdated. In the background Magit just runs Git commands and if you wish you can see what exactly is being run, making it possible for you to learn the git command-line by using Magit1.\nActually, Emacs already has a built-in version control package (aptly named vc). But to me the UI is rather cryptic. I\u0026rsquo;ve used magit since forever, and old habit die hard.\nFigure 1: Emacs magit status\nInstallation use-package 1 2 3 4 5 6 7 8 9 10 11 12 (use-package magit :ensure :demand t :config (evil-set-initial-state #\u0026#39;git-commit-mode \u0026#39;insert) (with-eval-after-load \u0026#39;general (+config/leader-go \u0026#34;g\u0026#34; \u0026#39;magit-status)) :custom (magit-revision-show-gravatars \u0026#39;(\u0026#34;^Author: \u0026#34; . \u0026#34;^Commit: \u0026#34;)) (magit-diff-refine-hunk \u0026#39;all) (magit-log-arguments \u0026#39;(\u0026#34;-n100\u0026#34; \u0026#34;--graph\u0026#34; \u0026#34;--decorate\u0026#34;))) Code Snippet 1: magit suggested installation Notes:\nmagit-revision-show-gravatars will enable gravatars when viewing commits. The service used by default is Libgravatar. extensions There are lots of extensions for magit which adds more features or functionalities. These are the ones I use:\ngit-link Interactive Emacs functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/\u0026hellip; repositories2.\n1 2 3 4 5 6 7 8 9 10 (use-package git-link :ensure :commands (git-link git-link-commit git-link-homepage) :config (with-eval-after-load \u0026#39;general (+config/leader-go \u0026#34;G\u0026#34; \u0026#39;(:ignore t :wk \u0026#34;git\u0026#34;) \u0026#34;Gl\u0026#34; \u0026#39;git-link \u0026#34;Gh\u0026#34; \u0026#39;git-link-homepage \u0026#34;Gc\u0026#34; \u0026#39;git-link-commit))) Code Snippet 2: my git-link setup Notes:\ngit-link returns the URL for the current buffer\u0026rsquo;s file location at the current line number or active region.\ngit-link-commit returns the URL for the commit at point.\ngit-link-homepage returns the URL for the repository\u0026rsquo;s homepage.\nAll the URLs are added to the kill ring automatically.\ngit-messenger git-messenger.el is Emacs port of git-messenger.vim3.\ngit-messenger.el provides function that popup commit message at current line. This is useful when you want to know why this line was changed.\n1 2 3 4 5 6 7 8 9 10 (use-package git-messenger :ensure :config (with-eval-after-load \u0026#39;general (+config/leader-go \u0026#34;Gm\u0026#34; \u0026#39;git-messenger:popup-message)) :custom ;; Enable magit-show-commit instead of pop-to-buffer (git-messenger:use-magit-popup t) (git-messenger:show-detail t)) Code Snippet 3: my git-messenger setup Figure 2: image from the github README\ngit-timemachine\nWalk through git revisions of a file4.\n1 2 3 4 5 6 7 (use-package git-timemachine :ensure :after magit :config (with-eval-after-load \u0026#39;general (+config/leader-go \u0026#34;Gt\u0026#34; \u0026#39;git-timemachine-toggle))) Code Snippet 4: My git-timemachine configuration magit-todos\nThis package displays keyword entries from source code comments and Org files in the Magit status buffer. Activating an item jumps to it in its file. By default, it uses keywords from hl-todo, minus a few (like NOTE).\nProjectile Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible). For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU find (but for performance sake an indexing mechanism backed by external commands exists as well).\nInstallation 1 2 3 4 5 6 7 (use-package projectile :ensure t :init (projectile-mode +1) :bind (:map projectile-mode-map (\u0026#34;s-p\u0026#34; . projectile-command-map) (\u0026#34;C-c p\u0026#34; . projectile-command-map))) Code Snippet 5: projectile suggested installation This is the basic configuration, however, projectile is highly configurable. This is how I setup my configuration for projectile:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 (use-package projectile :ensure t :demand t :bind (([remap evil-jump-to-tag] . projectile-find-tag) ([remap find-tag] . projectile-find-tag)) :hook (dired-before-readin . projectile-track-known-projects-find-file-hook) :custom (projectile-cache-file (expand-file-name \u0026#34;.projects\u0026#34; user-emacs-directory)) (projectile-auto-discover nil) (projectile-enable-caching (not noninteractive)) (projectile-globally-ignored-files \u0026#39;(\u0026#34;DS_Store\u0026#34; \u0026#34;TAGS\u0026#34;)) (projectile-globally-ignored-file-suffixes \u0026#39;(\u0026#34;.elc\u0026#34; \u0026#34;.pyc\u0026#34; \u0026#34;.o\u0026#34;)) (projectile-kill-buffers-filter \u0026#39;kill-only-files) (projectile-known-projects-file (expand-file-name \u0026#34;.projectile_projects.eld\u0026#34; user-emacs-directory)) (projectile-ignored-projects \u0026#39;(\u0026#34;~/\u0026#34;)) (projectile-project-root-files-bottom-up (append \u0026#39;(\u0026#34;.projectile\u0026#34; \u0026#34;.project\u0026#34; \u0026#34;.git\u0026#34;) (when (executable-find \u0026#34;hg\u0026#34;) \u0026#39;(\u0026#34;.hg\u0026#34;)) (when (executable-find \u0026#34;bzr\u0026#34;) \u0026#39;(\u0026#34;.bzr\u0026#34;)))) (projectile-project-root-files-top-down-recurring \u0026#39;(\u0026#34;Makefile\u0026#34;)) (compilation-buffer-name-function #\u0026#39;projectile-compilation-buffer-name) (compilation-save-buffers-predicate #\u0026#39;projectile-current-project-buffer-p) (projectile-git-submodule-command nil) (projectile-indexing-method \u0026#39;hybrid) :config (projectile-mode +1) (put \u0026#39;projectile-git-submodule-command \u0026#39;initial-value projectile-git-submodule-command) (with-eval-after-load \u0026#39;general (+config/leader-key \u0026#34;SPC\u0026#34; \u0026#39;projectile-find-file \u0026#34;p\u0026#34; \u0026#39;(:keymap projectile-command-map :package projectile :wk \u0026#34;projectile\u0026#34;)))) Code Snippet 6: my projectile configuration Notes:\nif you use https://github.com/emacs-dashboard/emacs-dashboarddashboard, projectile will automatically set dashboard-projects-backend to 'projectile. External tools Projectile will work without any external dependencies out of the box. However, if you have various tools installed, they will be automatically used when appropriate to improve performance. If you use git, install the system package as well.\nfd File searching tool, if available, will be use as an alternative to git ls-files.\nag / ripgrep To benefit from the projectile-ag and projectile-ripgrep commands to perform file search, it’s recommended to install ag (the_silver_searcher) and/or rg (ripgrep). You should also install the Emacs packages ag, ripgrep or rg if you want to make sure of Projectile’s commands projectile-ag and projectile-ripgrep.\n1 2 3 4 5 (use-package ripgrep :ensure :init (with-eval-after-load \u0026#39;evil-collection (evil-collection-ripgrep-setup))) Code Snippet 7: ripgrep package Useful commands projectile-find-file, bound to SPC p f in my configuration. Find file in current project. projectile-switch-project, bound to SPC p p, you can also switch to between open projects with SPC p q. projectile-grep, bound to SPC p s g, search for text/regexp in project. projectile-replace, bound to SPC p r, replace in project. projectile-commander, execute any projectile command with a single letter. See the variable projectile-commander-methods to see the list of methods used. projectile-find-other-file, switch between files with the same name but different extensions (e.g. foo.h to foo.c). projectile-run-shell-command-in-root and projectile-run-async-shell-comand-in-root, bound to SPC p ! and SPC p \u0026amp;, Run a shell command in the root of the project. other commands described in the documentation. Packages that interacts with projectile counsel helm perspective org-mode treemacs speedbar neotree lsp-mode diff-hl diff-hl-mode highlights uncommitted changes on the left side of the window (area also known as the \u0026ldquo;gutter\u0026rdquo;), allows you to jump between and revert them selectively5.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 (use-package diff-hl :ensure :hook (find-file . diff-hl-mode) :hook (vc-dir-mode . diff-hl-dir-mode) :hook (dired-mode . diff-hl-dired-mode) :hook (diff-hl-mode . diff-hl-show-hunk-mouse-mode) :hook (diff-hl-mode . diff-hl-flydiff-mode) :hook (magit-pre-refresh-hook . diff-hl-magit-pre-refresh) :hook (magit-post-refresh-hook . diff-hl-magit-post-refresh) :init (global-diff-hl-mode) :custom (vc-git-diff-switches \u0026#39;(\u0026#34;--histogram\u0026#34;) diff-hl-flydiff-delay 0.5 diff-hl-show-staged-changes nil) :config (when (featurep \u0026#39;flycheck) (setq flycheck-indication-mode \u0026#39;right-fringe))) Code Snippet 8: my diff-hl setup Perspective The Perspective package provides multiple named workspaces (or \u0026ldquo;perspectives\u0026rdquo;) in Emacs, similar to multiple desktops in window managers like Awesome and XMonad, and Spaces on the Mac. Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the xref ring. This makes it easy to work on many separate projects without getting lost in all the buffers. Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available (by default). Each Emacs frame has a distinct list of perspectives6.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 (use-package perspective :ensure :config (setq persp-initial-frame-name \u0026#34;Main\u0026#34; persp-suppress-no-prefix-key-warning t) (if (featurep \u0026#39;no-littering) (setq persp-state-default-file (expand-file-name \u0026#34;.perspective-state\u0026#34; no-littering-var-directory)) (setq persp-state-default-file (expand-file-name \u0026#34;.perspective-state\u0026#34; user-emacs-directory))) (global-set-key [remap switch-to-buffer] #\u0026#39;persp-switch-to-buffer*) (when (featurep \u0026#39;consult) (require \u0026#39;consult) (unless (boundp \u0026#39;persp-consult-source) (defvar persp-consult-source (list :name \u0026#34;Perspective\u0026#34; :narrow ?s :category \u0026#39;buffer :state #\u0026#39;consult--buffer-state :history \u0026#39;buffer-name-history :default t :items #\u0026#39;(lambda () (consult--buffer-query :sort \u0026#39;visibility :predicate \u0026#39;(lambda (buf) (persp-is-current-buffer buf t)) :as #\u0026#39;buffer-name))))) (consult-customize consult--source-buffer :hidden t :default nil) (add-to-list \u0026#39;consult-buffer-sources persp-consult-source)) (with-eval-after-load \u0026#39;general (general-def :keymaps \u0026#39;perspective-map \u0026#34;P\u0026#34; \u0026#39;projectile-persp-switch-project) (+config/leader-key \u0026#34;TAB\u0026#34; \u0026#39;(:keymap perspective-map :package perspective :which-key \u0026#34;perspective\u0026#34;) \u0026#34;TAB TAB\u0026#34; \u0026#39;(persp-switch-last :wk \u0026#34;switch to last perspective\u0026#34;) \u0026#34;C-x\u0026#34; \u0026#39;(persp-switch-to-scratch-buffer :wk \u0026#34;switch to scratch buffer\u0026#34;))) :init (customize-set-variable \u0026#39;persp-mode-prefix-key (kbd \u0026#34;C-c TAB\u0026#34;)) (unless (equal persp-mode t) (persp-mode 1)) :bind (([remap switch-to-buffer] . persp-switch-to-buffer*) ([remap kill-buffer] . persp-kill-buffer*)) :hook (kill-emacs . persp-state-save)) (use-package persp-projectile :ensure t :after perspective :commands projectile-persp-switch-project) Code Snippet 9: my perspective configuration Notes: The persp-consult-source is added to the consult-buffer-sources for the consult-buffer command. The prefix keybinding I use is SPC TAB.\nhttps://magit.vc/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/sshaw/git-link\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/emacsorphanage/git-messenger\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/emacsmirror/git-timemachine\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/dgutov/diff-hl\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/nex3/perspective-el\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/emacs-version-control/","summary":"Magit Magit is a complete text-based user interface to Git. It fills the glaring gap between the Git command-line interface and various GUIs, letting you perform trivial as well as elaborate version control tasks with just a couple of mnemonic key presses. Magit looks like a prettified version of what you get after running a few Git commands but in Magit every bit of visible information is also actionable to an extent that goes far beyond what any Git GUI provides and it takes care of automatically refreshing this output when it becomes outdated.","title":"Emacs Version Control"},{"content":"Eshell It is a shell written in Emacs Lisp. Eshell is both a command shell and an Emacs Lisp REPL (Read Eval Print Loop), as a result, you can invoke commands in two different ways: command form or in Lisp form.\nAs always, the official documentation provides you with more than enough information on Eshell.\nFigure 1: Eshell\nCommand form Command form looks much the same as in other shells. A command consists of arguments separated by spaces; the first argument is the command to run, with any subsequent arguments being passed to that command.\nFigure 2: eshell command form\nLisp form Lisp form looks like ordinary Emacs Lisp code, because that’s what it is. As a result, you can use any syntax normally available to an Emacs Lisp program.\nFigure 3: eshell elisp form\nCustomization Standard I/O works well in eshell, but ncurses interfaces like htop and nano won’t run in it; we can tell eshell to run such commands in AnsiTerm instead, which is a full emulated VT100 terminal.\n1 (append \u0026#39;(\u0026#34;htop\u0026#34; \u0026#34;vim\u0026#34; \u0026#34;ssh\u0026#34;) eshell-visual-commands) Note that usually this is already appended, see the output of variable eshell-visual-commands to find out what already included.\n1 eshell-visual-commands Completion esh-autosuggest Fish-like history autosuggestions in eshell1.\n1 2 3 4 5 6 (use-package esh-autosuggest :hook (eshell-mode . esh-autosuggest-mode) ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the ;; line below instead: ;; :hook (eshell-mode-hook . esh-autosuggest-mode) :ensure t) https://github.com/dieggsy/esh-autosuggest\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/emacs-shell/","summary":"Eshell It is a shell written in Emacs Lisp. Eshell is both a command shell and an Emacs Lisp REPL (Read Eval Print Loop), as a result, you can invoke commands in two different ways: command form or in Lisp form.\nAs always, the official documentation provides you with more than enough information on Eshell.\nFigure 1: Eshell\nCommand form Command form looks much the same as in other shells. A command consists of arguments separated by spaces; the first argument is the command to run, with any subsequent arguments being passed to that command.","title":"Emacs shell"},{"content":"Why? Figure 1: Default Emacs UI\nFor those who prefer a universal theme in their destop, the default Emacs interface is kind of ugly. Though there are built-in themes included, to be fair the options are limited.\nFigure 2: emacs wombat theme, one of the better ones\nDoom When I first tried Emacs, Doomemacs was my first choice. It\u0026rsquo;s kind of a \u0026ldquo;curated default configurations\u0026rdquo;.\nFigure 3: doom emacs, image from their github page\nBut since I\u0026rsquo;ve started to write my own configuration files for Emacs, I still use their mode-line and themes.\nInstalling 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 (use-package all-the-icons :ensure :if (display-graphic-p)) (use-package doom-themes :ensure t :config ;; Global settings (defaults) (setq doom-themes-enable-bold t ; if nil, bold is universally disabled doom-themes-enable-italic t) ; if nil, italics is universally disabled (load-theme \u0026#39;doom-nord t) ;; Enable flashing mode-line on errors (doom-themes-visual-bell-config) ;; Enable custom neotree theme (all-the-icons must be installed!) ;; (doom-themes-neotree-config) ;; or for treemacs users (setq doom-themes-treemacs-theme \u0026#34;doom-atom\u0026#34;) ; use \u0026#34;doom-colors\u0026#34; for less minimal icon theme (doom-themes-treemacs-config) ;; Corrects (and improves) org-mode\u0026#39;s native fontification. (doom-themes-org-config)) (use-package doom-modeline :ensure :hook (after-init . doom-modeline-mode)) Notes: all-the-icons is one of the dependency. Run M-x all-the-icons-install-fonts command to install the font. I use the doom-nord theme to match my desktop theme. Dashboard Just to make it more \u0026ldquo;doomy\u0026rdquo;.\n1 2 3 4 5 6 ;; use-package with package.el: (use-package dashboard :ensure t :config (dashboard-setup-startup-hook) (setq initial-buffer-choice (lambda () (get-buffer-create \u0026#34;*dashboard*\u0026#34;)))) Figure 4: emacs with doom themes, mode-line, and dashboard\n","permalink":"https://alexforsale.github.io/posts/theming-emacs/","summary":"Why? Figure 1: Default Emacs UI\nFor those who prefer a universal theme in their destop, the default Emacs interface is kind of ugly. Though there are built-in themes included, to be fair the options are limited.\nFigure 2: emacs wombat theme, one of the better ones\nDoom When I first tried Emacs, Doomemacs was my first choice. It\u0026rsquo;s kind of a \u0026ldquo;curated default configurations\u0026rdquo;.\nFigure 3: doom emacs, image from their github page","title":"Theming Emacs"},{"content":"Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.\nInstalling Add Melpa 1 2 (add-to-list \u0026#39;package-archives \u0026#39;(\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;)) Code Snippet 1: melpa with use-package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 (use-package evil :ensure :preface (customize-set-variable \u0026#39;evil-want-keybinding nil) ;; if using `evil-collection\u0026#39; (customize-set-variable \u0026#39;evil-want-integration t) ;; if using `evil-collection\u0026#39; (customize-set-variable \u0026#39;evil-undo-system \u0026#39;undo-redo) (customize-set-variable \u0026#39;evil-want-C-u-scroll t) ;; move universal arg to \u0026lt;leader\u0026gt; u (customize-set-variable \u0026#39;evil-want-C-u-delete t) ;; delete back to indentation in insert state (customize-set-variable \u0026#39;evil-want-C-g-bindings t) :config (evil-mode 1) ;; disable this when using `general.el\u0026#39; (evil-set-leader \u0026#39;(normal visual) (kbd \u0026#34;SPC\u0026#34;)) (evil-set-leader \u0026#39;(normal visual) (kbd \u0026#34;C-c SPC\u0026#34;) t)) Code Snippet 2: use-package without use-package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ;; Set up package.el to work with MELPA (require \u0026#39;package) (add-to-list \u0026#39;package-archives \u0026#39;(\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;)) (package-initialize) (package-refresh-contents) ;; Download Evil (unless (package-installed-p \u0026#39;evil) (package-install \u0026#39;evil)) ;; Enable Evil (require \u0026#39;evil) (evil-mode 1) Code Snippet 3: without use-package Configuration Leader and Localleader key This is inherited from vim1, So this isn\u0026rsquo;t really required, but as someone who use both vim and Emacs it certainly easier to memorize.\n1 2 (evil-set-leader \u0026#39;(normal visual) (kbd \u0026#34;SPC\u0026#34;)) (evil-set-leader \u0026#39;(normal visual) (kbd \u0026#34;C-c SPC\u0026#34;) t) Code Snippet 4: leader and local leader key The first line will set the \u0026lt;leader\u0026gt; key, while the latter will set the \u0026lt;localleader\u0026gt;.\nadditional packages evil-collection Setup keybindings for evil-mode\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 (use-package evil-collection :ensure t :after evil :init (evil-collection-init) :custom (evil-collection-setup-minibuffer t) (evil-collection-calendar-want-org-bindings t) :config (with-eval-after-load \u0026#39;bookmark (evil-collection-bookmark-setup)) (with-eval-after-load \u0026#39;pass (evil-collection-pass-setup)) (with-eval-after-load \u0026#39;man (evil-collection-man-setup)) (with-eval-after-load \u0026#39;org (evil-collection-org-setup)) (with-eval-after-load \u0026#39;corfu (evil-collection-corfu-setup)) (with-eval-after-load \u0026#39;embark (evil-collection-embark-setup)) (with-eval-after-load \u0026#39;epa (evil-collection-epa-setup)) (with-eval-after-load \u0026#39;nov (evil-collection-nov-setup)) (with-eval-after-load \u0026#39;eww (evil-collection-eww-setup)) (with-eval-after-load \u0026#39;emms (evil-collection-emms-setup) (evil-collection-emms-browser-setup))) Code Snippet 5: evil-collection Notes: evil-collection assumes evil-want-keybinding is set to nil and evil-want-integration is set to t before loading evil and evil-collection. Note some other packages may load evil (e.g. evil-leader) so bear that in mind when determining when to set the variables. abbrev-mode Not a mandatory package, but it\u0026rsquo;s built-in into Emacs so it nice to have,\n1 2 (use-package abbrev :ensure nil) Code Snippet 6: abbrev-mode evil-terminal-cursor-changer Change the cursor shape and color when in terminal.\n1 2 3 4 5 (unless (display-graphic-p) (use-package evil-terminal-cursor-changer :ensure t :config (evil-terminal-cursor-changer-activate))) Code Snippet 7: evil-terminal-cursor-changer evil-args Motions and text objects for delimited arguments in Evil, the extensible vi layer for Emacs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 (use-package evil-args :after evil :ensure t :hook (emacs-lisp-mode . +config/evil-args-lisp) :config (define-key evil-inner-text-objects-map \u0026#34;a\u0026#34; \u0026#39;evil-inner-arg) (define-key evil-outer-text-objects-map \u0026#34;a\u0026#34; \u0026#39;evil-outer-arg) (define-key evil-normal-state-map \u0026#34;L\u0026#34; \u0026#39;evil-forward-arg) (define-key evil-normal-state-map \u0026#34;H\u0026#34; \u0026#39;evil-backward-arg) (define-key evil-motion-state-map \u0026#34;L\u0026#34; \u0026#39;evil-forward-arg) (define-key evil-motion-state-map \u0026#34;H\u0026#34; \u0026#39;evil-backward-arg) (define-key evil-normal-state-map \u0026#34;K\u0026#34; \u0026#39;evil-jump-out-args) (defun +config/evil-args-lisp () (setq-local evil-args-delimiters \u0026#39;(\u0026#34; \u0026#34;)))) Code Snippet 8: evil-args https://learnvimscriptthehardway.stevelosh.com/chapters/06.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/emacs-evil/","summary":"Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.\nInstalling Add Melpa 1 2 (add-to-list \u0026#39;package-archives \u0026#39;(\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;)) Code Snippet 1: melpa with use-package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 (use-package evil :ensure :preface (customize-set-variable \u0026#39;evil-want-keybinding nil) ;; if using `evil-collection\u0026#39; (customize-set-variable \u0026#39;evil-want-integration t) ;; if using `evil-collection\u0026#39; (customize-set-variable \u0026#39;evil-undo-system \u0026#39;undo-redo) (customize-set-variable \u0026#39;evil-want-C-u-scroll t) ;; move universal arg to \u0026lt;leader\u0026gt; u (customize-set-variable \u0026#39;evil-want-C-u-delete t) ;; delete back to indentation in insert state (customize-set-variable \u0026#39;evil-want-C-g-bindings t) :config (evil-mode 1) ;; disable this when using `general.","title":"Emacs Evil"},{"content":"About general.el provides a more convenient method for binding keys in emacs (for both evil and non-evil users). Like use-package, which provides a convenient, unified interface for managing packages, general.el is intended to provide a convenient, unified interface for key definitions. While this package does implement some completely new functionality (such as the ability to make vim-style keybindings under non-prefix keys with an optional timeout), its primary purpose is to build on existing functionality to make key definition more clear and concise. general-define-key is user-extensible and supports defining multiple keys in multiple keymaps at once, implicitly wrapping key strings with (kbd ...), using named prefix key sequences (like the leader key in vim), and much more1.\nInstalling with use-package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 (use-package general :ensure t :init (with-eval-after-load \u0026#39;evil (general-evil-setup)) (general-auto-unbind-keys) :config (general-override-mode) (general-create-definer +config/leader-key :keymaps \u0026#39;override :states \u0026#39;(insert emacs normal hybrid motion visual operator) :prefix \u0026#34;SPC\u0026#34; :non-normal-prefix \u0026#34;s-SPC\u0026#34;) (general-create-definer +config/local-leader :keymaps \u0026#39;override :states \u0026#39;(emacs normal hybrid motion visual operator) :prefix \u0026#34;m\u0026#34; :non-normal-prefix \u0026#34;s-m\u0026#34; \u0026#34;\u0026#34; \u0026#39;(:ignore t :which-key (lambda (arg) `(,(cadr (split-string (car arg) \u0026#34; \u0026#34;)) . ,(replace-regexp-in-string \u0026#34;-mode$\u0026#34; \u0026#34;\u0026#34; (symbol-name major-mode))))))) Notes: general-create-definer is a helper macro to create wrapper for general-def. Here I create two wrapper, +config/leader-key and +config/local-leader. The first with SPC as a prefix, the latter with m To create a keybinding with +config/leader-key: 1 2 3 4 5 6 (+config/leader-key \u0026#34;;\u0026#34; \u0026#39;pp-eval-expression \u0026#34;:\u0026#34; \u0026#39;execute-extended-command \u0026#34;.\u0026#34; \u0026#39;(find-file :wk \u0026#34;find file\u0026#34;) \u0026#34;^\u0026#34; \u0026#39;(subword-capitalize :wk \u0026#34;Capitalize subword\u0026#34;) \u0026#34;u\u0026#34; \u0026#39;universal-argument) Pressing SPC ; in normal mode, will execute pp-eval-expression, and so on.\nAs for +config/local-leader: 1 2 3 4 5 6 (with-eval-after-load \u0026#39;ansible (+config/local-leader :keymaps \u0026#39;yaml-mode-map \u0026#34;a\u0026#34; \u0026#39;(:ignore t :wk ansible) \u0026#34;ad\u0026#34; \u0026#39;ansible-decrypt-buffer \u0026#34;ae\u0026#34; \u0026#39;ansible-encrypt-buffer)) Pressing m a d while in normal mode while in a yaml-mode buffer (ex. editing a yaml file) will execute ansible-decrypt-buffer\nUseful macro 1 2 3 4 5 6 7 8 9 10 11 12 13 (defmacro +config/leader-menu! (name infix-key \u0026amp;rest body) \u0026#34;Create a definer NAME `+config/leader-NAME\u0026#39; wrapping `+config/leader-key\u0026#39;. Create prefix map: `+config/leader-NAME-map\u0026#39;. Prefix bindings in BODY with INFIX-KEY.\u0026#34; (declare (indent 2)) `(progn (general-create-definer ,(intern (concat \u0026#34;+config/leader-\u0026#34; name)) :wrapping +config/leader-key :prefix-map (quote ,(intern (concat \u0026#34;+config/leader-\u0026#34; name \u0026#34;-map\u0026#34;))) :infix ,infix-key :wk-full-keys nil \u0026#34;\u0026#34; \u0026#39;(:ignore t :which-key ,name)) (,(intern (concat \u0026#34;+config/leader-\u0026#34; name)) ,@body))) This is a macro for creating a wrapper for each sub menu. For example:\n1 (+config/leader-menu! \u0026#34;buffer\u0026#34; \u0026#34;b\u0026#34;) will create a keymap with the name +config/leader-buffer-map, to add keybinding into it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 (+config/leader-buffer \u0026#34;[\u0026#34; \u0026#39;(previous-buffer :wk \u0026#34;previous buffer\u0026#34;) \u0026#34;]\u0026#34; \u0026#39;(next-buffer :wk \u0026#34;next buffer\u0026#34;) \u0026#34;TAB\u0026#34; \u0026#39;((lambda () (interactive) (switch-to-buffer nil)) :wk \u0026#34;other-buffer\u0026#34;) \u0026#34;b\u0026#34; \u0026#39;(switch-to-buffer :wk \u0026#34;switch to buffer\u0026#34;) \u0026#34;s\u0026#34; \u0026#39;(basic-save-buffer :wk \u0026#34;save buffer\u0026#34;) \u0026#34;c\u0026#34; \u0026#39;(clone-indirect-buffer :wk \u0026#34;clone buffer\u0026#34;) \u0026#34;C\u0026#34; \u0026#39;(clone-indirect-buffer-other-window :wk \u0026#34;clone buffer other window\u0026#34;) \u0026#34;d\u0026#34; \u0026#39;(kill-current-buffer :wk \u0026#34;kill current buffer\u0026#34;) \u0026#34;i\u0026#34; \u0026#39;ibuffer \u0026#34;k\u0026#34; \u0026#39;(kill-buffer :wk \u0026#34;kill buffer\u0026#34;) \u0026#34;l\u0026#34; \u0026#39;(evil-switch-to-windows-last-buffer :wk \u0026#34;Switch to last open buffer\u0026#34;) \u0026#34;m\u0026#34; \u0026#39;((lambda () (interactive) (switch-to-buffer \u0026#34;*Messages*\u0026#34;)) :wk \u0026#34;switch to messages buffer\u0026#34;) \u0026#34;n\u0026#34; \u0026#39;(next-buffer :wk \u0026#34;next buffer\u0026#34;) \u0026#34;N\u0026#34; \u0026#39;(evil-buffer-new :wk \u0026#34;New unnamed buffer\u0026#34;) \u0026#34;p\u0026#34; \u0026#39;(previous-buffer :wk \u0026#34;previous buffer\u0026#34;) \u0026#34;o\u0026#34; \u0026#39;((lambda () (interactive) (switch-to-buffer nil)) :wk \u0026#34;other-buffer\u0026#34;) \u0026#34;r\u0026#34; \u0026#39;(revert-buffer-quick :wk \u0026#34;revert buffer\u0026#34;) \u0026#34;R\u0026#34; \u0026#39;(rename-buffer :wk \u0026#34;rename buffer\u0026#34;) \u0026#34;x\u0026#34; \u0026#39;((lambda () (interactive) (switch-to-buffer \u0026#34;*scratch*\u0026#34;)) :wk \u0026#34;switch to scratch buffer\u0026#34;) \u0026#34;z\u0026#34; \u0026#39;(bury-buffer :wk \u0026#34;bury buffer\u0026#34;)) Pressing SPC b b will execute switch-to-buffer.\nSimulating key 1 2 3 4 5 6 (+config/leader-key \u0026#34;h\u0026#34; (general-simulate-key \u0026#34;C-h\u0026#34; :state \u0026#39;(normal visual) :name general-SPC-h-simulates-C-h :docstring \u0026#34;Simulates C-h in normal and visual mode.\u0026#34; :which-key \u0026#34;Help\u0026#34;)) This is how we can simulate C-h keybindings into general keybindings. This way SPC- h is simulating C-h.\nhttps://github.com/noctuid/general.el\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/emacs-general/","summary":"About general.el provides a more convenient method for binding keys in emacs (for both evil and non-evil users). Like use-package, which provides a convenient, unified interface for managing packages, general.el is intended to provide a convenient, unified interface for key definitions. While this package does implement some completely new functionality (such as the ability to make vim-style keybindings under non-prefix keys with an optional timeout), its primary purpose is to build on existing functionality to make key definition more clear and concise.","title":"Emacs general.el"},{"content":" Figure 1: Default Emacs\nThe default Emacs is kinda boring and unintuitive, if you\u0026rsquo;re looking for a simple text editor, I really suggest other editors like nano, vim, or other graphical editors like gedit. The main advantage of using Emacs is that in can be more than just a text editor.\nFigure 2: Tetris inside Emacs\nI don\u0026rsquo;t think anybody ever want to play tetris inside Emacs, but it\u0026rsquo;s there!\nFigure 3: Emacs as a file manager\nThe dired-mode enable us to \u0026ldquo;edit directory\u0026rdquo; (DIRectory EDitor), delete, rename, print etc.\nFigure 4: terminal in Emacs\nEshell is a shell-like interpreter implemented in Emacs Lisp.\nSo, without any configuration, Emacs is very usable. But first we need to know the basic.\nThe Basic terminology emacs rest of the world frame program window window pane buffer file kill cut yank paste region selection Screen organization Point Basically, the cursor. By default, it is a solid block, the point appear on a character, but actually situated before the character under the cursor.\nThe echo area The line at the very bottom of the frame, useful for displaying error messages or other informative messages.\nThe modeline Located at the bottom of each window describing what\u0026rsquo;s going on in the current buffer. If there\u0026rsquo;s only one window, the mode line appears above the echo area; it is next-to-last in the frame.\nMenu bar Located at the top of each frame.\nKeys Keyboard shortcuts, for examples:\n1 M-x tetris M stands for Alt, so press and hold Alt, press x, release and type tetris and press Enter.\n1 C-x C-f /path/to/some/file C stands for Control, so press and hold CTRL, release, and press and hold CTRL, press f, release, and type some path to a file.\nModes Each buffer is associated with something called major mode, and may have one or more active minor modes. Modes are sets of specific rules and/or keybindings for some buffers. There are read-only mode that forbid you from editing a buffer, there\u0026rsquo;s also language-specific modes for programming languages. To get a detailed description for the current buffer:\n1 C-h m To get all the available keybindings in the current buffer/mode:\n1 C-h b Tutorial This will get you started with Emacs, open the tutorial buffer with:\n1 C-h t Configuration file The configuration file itself is written in Emacs Lisp. The default location is traditionally in ~/.emacs, although Emacs will also look at ~/.emacs.el, /.emacs.d/init.el, and ~/.config/emacs/init.el. Though if you put your configuration files in ~/.config/emacs directory, be aware that it will not used if ~/.emacs file or ~/.emacs.d/ directory already exists,\nSome useful sane defaults use-short-answer Use short answer for each confirmation (\u0026ldquo;y\u0026rdquo; or \u0026ldquo;n\u0026rdquo;, instead of \u0026ldquo;yes\u0026rdquo; or \u0026ldquo;no\u0026rdquo;).\n1 (setq-default use-short-answers t) disable menu / tool / scroll bar Useful if you\u0026rsquo;re already comfortable with the keyboard-centric workflow, and you want to expand the buffer as much as possible.\n1 2 3 (menu-bar-mode -1) (tool-bar-mode -1) (scroll-bar-mode -1) disable splash-screen 1 (setq inhibit-startup-screen t) Disable use-file-dialog 1 (setq use-file-dialog nil) Since we don\u0026rsquo;t use the GUI (menu and toolbar).\nresize windows pixelwise This affect split-window, maximize-window, minimize-window, fit-window-to-buffer, and fit-frame-to-buffer.\n1 (setq window-resize-pixelwise t) resize frame pixelwise Neccessary if you\u0026rsquo;re using window-managers.\n1 (setq frame-resize-pixelwise t) Ask for confirmatino when exiting Emacs The default is don\u0026rsquo;t ask for confirmation (nil)\n1 (setq confirm-kill-emacs #\u0026#39;yes-or-no-p) enable save-place-mode Save the point to the last place when the buffer is previously visited.\n1 (setq save-place-mode t) enable savehist-mode Save the minibuffer history.\n1 (savehist-mode t) separate Customization file elsewhere By default this file is appended to the init file, which usually not desired.\n1 2 3 (setq custom-file (locate-user-emacs-file \u0026#34;custom.el\u0026#34;)) (when (file-exists-p custom-file) (load custom-file)) this snippet will ensure the file is separated and loaded when starting Emacs.\nIgnore case in completion 1 2 3 (setq read-buffer-completion-ignore-case t read-file-name-completion-ignore-case t completion-ignore-case t) enable global auto-revert-mode This mode enable auto-revert buffer when the file on the disk changes.\n1 (global-auto-revert-mode 1) also enable it for non-file buffers 1 (setq global-auto-revert-non-file-buffers t) This way, both file buffers and buffers with a custom revert-buffer-function will be auto-reverted.\nDon\u0026rsquo;t generate message when auto-reverting 1 (setq auto-revert-verbose nil) electric-pair-mode This mode is useful when editing Emacs Lisp buffer, we\u0026rsquo;ll enable this on every programming mode (prog-mode) via hook:\n1 (add-hook \u0026#39;prog-mode-hook (lambda () (electric-pair-mode 1))) Use clipboard for cutting and pasting 1 (setq select-enable-clipboard t) Delete to trash Specifies whether to use the system\u0026rsquo;s trash can.\n1 (setq delete-by-moving-to-trash t) Automatic Compression 1 (setq auto-compression-mode t) Opening compressed file (zipped etc), will automatically uncompressed for reading, and compressed when writing.\nenable font-lock-mode This will enable syntax-highlighting and coloring.\n1 (global-font-lock-mode t) recent file 1 (recentf-mode 1) prefer spaces than tabs 1 (set-default \u0026#39;indent-tabs-mode nil) visualize empty lines 1 (set-default \u0026#39;indicate-empty-lines t) Ease CamelCase word navigation 1 (global-subword-mode 1) This way editPost is considered a two word.\ndisable electric-indent-mode 1 (setq electric-indent-mode nil) enable delete-selection-mode 1 (delete-selection-mode 1) When enabled, typed text will replace the selection if the selection is active, which is what I prefer. If disabled (nil), typed text is just inserted at point regardless of any selection.\nEarly init This file is processed before init.el, must be named early-init.el and located in the same directory as the init.el. Example customization that should be placed here are:\nCustom package management (this is loaded before the default package). I use this for early UI setup:\n1 2 3 (push \u0026#39;(menu-bar-lines . 0) default-frame-alist) (push \u0026#39;(tool-bar-lines . 0) default-frame-alist) (push \u0026#39;(vertical-scroll-bars) default-frame-alist) After Configuration Figure 5: After configuring\nUseful links Configuration generator for those tldr users.\nEmacs wiki https://www.emacswiki.org/\nGnu Emacs Homepage GNU Emacs tour Emacs news ","permalink":"https://alexforsale.github.io/posts/emacs-sane-defaults/","summary":"Figure 1: Default Emacs\nThe default Emacs is kinda boring and unintuitive, if you\u0026rsquo;re looking for a simple text editor, I really suggest other editors like nano, vim, or other graphical editors like gedit. The main advantage of using Emacs is that in can be more than just a text editor.\nFigure 2: Tetris inside Emacs\nI don\u0026rsquo;t think anybody ever want to play tetris inside Emacs, but it\u0026rsquo;s there!","title":"Emacs sane defaults"},{"content":"Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The focus of Vertico is to provide a UI which behaves correctly under all circumstances. By reusing the built-in facilities system, Vertico achieves full compatibility with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extendable and modular. Additional enhancements are available as extensions or complementary packages. The code base is small and maintainable. The main vertico.el package is only about 600 lines of code without white space and comments1.\nInstallation Figure 1: emacs without vertico\nFigure 2: emacs with vertico\nWith use-package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 ;; Enable vertico (use-package vertico :init (vertico-mode) ;; Different scroll margin ;; (setq vertico-scroll-margin 0) ;; Show more candidates ;; (setq vertico-count 20) ;; Grow and shrink the Vertico minibuffer ;; (setq vertico-resize t) ;; Optionally enable cycling for `vertico-next\u0026#39; and `vertico-previous\u0026#39;. ;; (setq vertico-cycle t) ) ;; Persist history over Emacs restarts. Vertico sorts by history position. (use-package savehist :init (savehist-mode)) ;; A few more useful configurations... (use-package emacs :init ;; Add prompt indicator to `completing-read-multiple\u0026#39;. ;; We display [CRM\u0026lt;separator\u0026gt;], e.g., [CRM,] if the separator is a comma. (defun crm-indicator (args) (cons (format \u0026#34;[CRM%s] %s\u0026#34; (replace-regexp-in-string \u0026#34;\\\\`\\\\[.*?]\\\\*\\\\|\\\\[.*?]\\\\*\\\\\u0026#39;\u0026#34; \u0026#34;\u0026#34; crm-separator) (car args)) (cdr args))) (advice-add #\u0026#39;completing-read-multiple :filter-args #\u0026#39;crm-indicator) ;; Do not allow the cursor in the minibuffer prompt (setq minibuffer-prompt-properties \u0026#39;(read-only t cursor-intangible t face minibuffer-prompt)) (add-hook \u0026#39;minibuffer-setup-hook #\u0026#39;cursor-intangible-mode) ;; Emacs 28: Hide commands in M-x which do not work in the current mode. ;; Vertico commands are hidden in normal buffers. (setq read-extended-command-predicate #\u0026#39;command-completion-default-include-p) ;; Enable recursive minibuffers (setq enable-recursive-minibuffers t)) vertico configuration vertico-scroll-margin Number of lines at the top and bottom when scrolling (default to 2). vertico-count Maximal number of candidates to show (default to 10). vertico-resize How to resize the vertico minibuffer window (default to the value of resize-mini-windows, which is 'grow-only). vertico-cycle enable cycling for vertico-next and vertico-previous, default to nil. Extensions The package also includes some extensions, they\u0026rsquo;re installed automatically if using package from ELPA.\nvertico-flat Flat, horizontal display for vertico, enable it with M-x vertico-flat-mode.\nFigure 3: vertico-flat-mode\nvertico-buffer vertico-buffer-mode to display Vertico like a regular buffer.\nFigure 4: vertico-buffer-mode\nvertico-directory Commands for Ido-like directory navigation. The commands can be bound in the vertico-map. Furthermore a cleanup function for shadowed file paths is provided.\n1 2 3 4 (keymap-set vertico-map \u0026#34;RET\u0026#34; #\u0026#39;vertico-directory-enter) (keymap-set vertico-map \u0026#34;DEL\u0026#34; #\u0026#39;vertico-directory-delete-char) (keymap-set vertico-map \u0026#34;M-DEL\u0026#34; #\u0026#39;vertico-directory-delete-word) (add-hook \u0026#39;rfn-eshadow-update-overlay-hook #\u0026#39;vertico-directory-tidy) this way when opening file (via C-x C-f or with M-x find-file), pressing Backspace (or DEL), will automatically remove one directory up.\nvertico-grid Enables grid-display.\nFigure 5: vertico-grid-mode\nvertico-indexed-mode Select indexed candidates with prefix arguments.\nSelect the candidate number with M-\u0026lt;candidate\u0026gt;, for example: to select candidate 2 press M-2 RET.\nvertico-mouse Support for scrolling and candidate selection.\nvertico-unobstrusive-mode Display only the topmost candidate. It is a simple derivative of vertico-flat-mode.\nvertico-suspend Suspend the current Vertico completion session. If vertico-suspend is called from within the currently active Vertico minibuffer, the completion session is suspended. Otherwise the last session is restored. It is possible to suspend multiple nested Vertico sessions. Note that vertico-suspend requires that recursive minibuffers are enabled by setting the customizable variable enable-recursive-minibuffers to t.\nvertico-reverse Reverse the list of candidates.\nFigure 7: vertico-reverse-mode\nvertico-repeat Enables repetition of Vertico sessions via the vertico-repeat, vertico-repeat-previous and vertico-repeat-select commands. If the repeat commands are called from an existing Vertico minibuffer session, only sessions corresponding to the current minibuffer command are offered via completion.\nIt is necessary to register a minibuffer setup hook, which saves the Vertico state for repetition. In order to save the history across Emacs sessions, enable savehist-mode and add vertico-repeat-history to savehist-additional-variables.\n1 2 3 4 5 6 7 (add-to-list \u0026#39;savehist-additional-variables \u0026#39;vertico-repeat-history) (keymap-global-set \u0026#34;M-R\u0026#34; #\u0026#39;vertico-repeat) (keymap-set vertico-map \u0026#34;M-P\u0026#34; #\u0026#39;vertico-repeat-previous) (keymap-set vertico-map \u0026#34;M-N\u0026#34; #\u0026#39;vertico-repeat-next) (keymap-set vertico-map \u0026#34;S-\u0026lt;prior\u0026gt;\u0026#34; #\u0026#39;vertico-repeat-previous) (keymap-set vertico-map \u0026#34;S-\u0026lt;next\u0026gt;\u0026#34; #\u0026#39;vertico-repeat-next) (add-hook \u0026#39;minibuffer-setup-hook #\u0026#39;vertico-repeat-save) vertico-quick Similar to vertico-indexed-mode, which prefixes candidates with quick keys. Typing these quick keys allows you to select the candidate in front of them. This is designed to be a faster alternative to selecting a candidate with vertico-next and vertico-previous.\n1 2 (keymap-set vertico-map \u0026#34;M-q\u0026#34; #\u0026#39;vertico-quick-insert) (keymap-set vertico-map \u0026#34;C-q\u0026#34; #\u0026#39;vertico-quick-exit) Pressing M-q while in vertico-map will show all the candidates, pressing C-q will exit the candidate selection.\nvertico-multiform Perhaps the most complex extensions, used for fine tuning the Vertico display and other minibuffer modes per command or completion category. For some commands you may want to use the vertico-buffer display and for completion categories like file you prefer the vertico-grid-mode.\n1 2 3 4 5 6 7 8 9 (setq vertico-multiform-commands \u0026#39;((consult-line buffer) (consult-imenu reverse buffer) (execute-extended-command flat))) (setq vertico-multiform-categories \u0026#39;((file buffer grid) (imenu (:not indexed mouse)) (symbol (vertico-sort-function . vertico-sort-alpha)))) (vertico-multiform-mode) Marginalia This package provides marginalia-mode which adds marginalia to the minibuffer completions. Marginalia are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates. Marginalia can only add annotations to the completion candidates. It cannot modify the appearance of the candidates themselves, which are shown unaltered as supplied by the original command2.\nInstallation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ;; Enable rich annotations using the Marginalia package (use-package marginalia ;; Bind `marginalia-cycle\u0026#39; locally in the minibuffer. To make the binding ;; available in the *Completions* buffer, add it to the ;; `completion-list-mode-map\u0026#39;. :bind (:map minibuffer-local-map (\u0026#34;M-A\u0026#34; . marginalia-cycle)) ;; The :init section is always executed. :init ;; Marginalia must be activated in the :init section of use-package such that ;; the mode gets enabled right away. Note that this forces loading the ;; package. (marginalia-mode)) Figure 9: Marginalia on find-file\nFigure 10: Marginalia on describe-variable\nAdding Icons in the minibuffer With additional package: all-the-icons-completion or nerd-icons-completion.\n1 2 3 4 (use-package nerd-icons-completion :hook (marginalia-mode . nerd-icons-completion-marginalia-setup) :config (nerd-icons-completion-mode)) Code Snippet 1: nerd-icons-completion 1 2 3 4 (use-package all-the-icons-completion :hook (marginalia-mode . all-the-icons-completion-marginalia-setup) :init (all-the-icons-completion-mode)) Code Snippet 2: all-the-icons-completion Figure 11: marginalia with nerd-icons-completion\nOrderless This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order. Each component can match in any one of several ways: literally, as a regexp, as an initialism, in the flex style, or as multiple word prefixes. By default, regexp and literal matches are enabled3.\nInstallation 1 2 3 4 5 (use-package orderless :ensure t :custom (completion-styles \u0026#39;(orderless basic)) (completion-category-overrides \u0026#39;((file (styles basic partial-completion))))) Figure 12: orderless using the wiki completion-styles\nConsult Consult provides search and navigation commands based on the Emacs completion function completing-read. Completion allows you to quickly select an item from a list of candidates. Consult offers asynchronous and interactive consult-grep and consult-ripgrep commands, and the line-based search command consult-line. Furthermore Consult provides an advanced buffer switching command consult-buffer to switch between buffers, recently opened files, bookmarks and buffer-like candidates from other sources. Some of the Consult commands are enhanced versions of built-in Emacs commands. For example the command consult-imenu presents a flat list of the Imenu with live preview, grouping and narrowing. Please take a look at the full list of commands4.\nInstallation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 (use-package consult ;; Replace bindings. Lazily loaded due by `use-package\u0026#39;. :bind (;; C-c bindings in `mode-specific-map\u0026#39; (\u0026#34;C-c M-x\u0026#34; . consult-mode-command) (\u0026#34;C-c h\u0026#34; . consult-history) (\u0026#34;C-c k\u0026#34; . consult-kmacro) (\u0026#34;C-c m\u0026#34; . consult-man) (\u0026#34;C-c i\u0026#34; . consult-info) ([remap Info-search] . consult-info) ;; C-x bindings in `ctl-x-map\u0026#39; (\u0026#34;C-x M-:\u0026#34; . consult-complex-command) ;; orig. repeat-complex-command (\u0026#34;C-x b\u0026#34; . consult-buffer) ;; orig. switch-to-buffer (\u0026#34;C-x 4 b\u0026#34; . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window (\u0026#34;C-x 5 b\u0026#34; . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame (\u0026#34;C-x t b\u0026#34; . consult-buffer-other-tab) ;; orig. switch-to-buffer-other-tab (\u0026#34;C-x r b\u0026#34; . consult-bookmark) ;; orig. bookmark-jump (\u0026#34;C-x p b\u0026#34; . consult-project-buffer) ;; orig. project-switch-to-buffer ;; Custom M-# bindings for fast register access (\u0026#34;M-#\u0026#34; . consult-register-load) (\u0026#34;M-\u0026#39;\u0026#34; . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated) (\u0026#34;C-M-#\u0026#34; . consult-register) ;; Other custom bindings (\u0026#34;M-y\u0026#34; . consult-yank-pop) ;; orig. yank-pop ;; M-g bindings in `goto-map\u0026#39; (\u0026#34;M-g e\u0026#34; . consult-compile-error) (\u0026#34;M-g f\u0026#34; . consult-flymake) ;; Alternative: consult-flycheck (\u0026#34;M-g g\u0026#34; . consult-goto-line) ;; orig. goto-line (\u0026#34;M-g M-g\u0026#34; . consult-goto-line) ;; orig. goto-line (\u0026#34;M-g o\u0026#34; . consult-outline) ;; Alternative: consult-org-heading (\u0026#34;M-g m\u0026#34; . consult-mark) (\u0026#34;M-g k\u0026#34; . consult-global-mark) (\u0026#34;M-g i\u0026#34; . consult-imenu) (\u0026#34;M-g I\u0026#34; . consult-imenu-multi) ;; M-s bindings in `search-map\u0026#39; (\u0026#34;M-s d\u0026#34; . consult-find) ;; Alternative: consult-fd (\u0026#34;M-s c\u0026#34; . consult-locate) (\u0026#34;M-s g\u0026#34; . consult-grep) (\u0026#34;M-s G\u0026#34; . consult-git-grep) (\u0026#34;M-s r\u0026#34; . consult-ripgrep) (\u0026#34;M-s l\u0026#34; . consult-line) (\u0026#34;M-s L\u0026#34; . consult-line-multi) (\u0026#34;M-s k\u0026#34; . consult-keep-lines) (\u0026#34;M-s u\u0026#34; . consult-focus-lines) ;; Isearch integration (\u0026#34;M-s e\u0026#34; . consult-isearch-history) :map isearch-mode-map (\u0026#34;M-e\u0026#34; . consult-isearch-history) ;; orig. isearch-edit-string (\u0026#34;M-s e\u0026#34; . consult-isearch-history) ;; orig. isearch-edit-string (\u0026#34;M-s l\u0026#34; . consult-line) ;; needed by consult-line to detect isearch (\u0026#34;M-s L\u0026#34; . consult-line-multi) ;; needed by consult-line to detect isearch ;; Minibuffer history :map minibuffer-local-map (\u0026#34;M-s\u0026#34; . consult-history) ;; orig. next-matching-history-element (\u0026#34;M-r\u0026#34; . consult-history)) ;; orig. previous-matching-history-element ;; Enable automatic preview at point in the *Completions* buffer. This is ;; relevant when you use the default completion UI. :hook (completion-list-mode . consult-preview-at-point-mode) ;; The :init configuration is always executed (Not lazy) :init ;; Optionally configure the register formatting. This improves the register ;; preview for `consult-register\u0026#39;, `consult-register-load\u0026#39;, ;; `consult-register-store\u0026#39; and the Emacs built-ins. (setq register-preview-delay 0.5 register-preview-function #\u0026#39;consult-register-format) ;; Optionally tweak the register preview window. ;; This adds thin lines, sorting and hides the mode line of the window. (advice-add #\u0026#39;register-preview :override #\u0026#39;consult-register-window) ;; Use Consult to select xref locations with preview (setq xref-show-xrefs-function #\u0026#39;consult-xref xref-show-definitions-function #\u0026#39;consult-xref) ;; Configure other variables and modes in the :config section, ;; after lazily loading the package. :config ;; Optionally configure preview. The default value ;; is \u0026#39;any, such that any key triggers the preview. ;; (setq consult-preview-key \u0026#39;any) ;; (setq consult-preview-key \u0026#34;M-.\u0026#34;) ;; (setq consult-preview-key \u0026#39;(\u0026#34;S-\u0026lt;down\u0026gt;\u0026#34; \u0026#34;S-\u0026lt;up\u0026gt;\u0026#34;)) ;; For some commands and buffer sources it is useful to configure the ;; :preview-key on a per-command basis using the `consult-customize\u0026#39; macro. (consult-customize consult-theme :preview-key \u0026#39;(:debounce 0.2 any) consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file consult-xref consult--source-bookmark consult--source-file-register consult--source-recent-file consult--source-project-recent-file ;; :preview-key \u0026#34;M-.\u0026#34; :preview-key \u0026#39;(:debounce 0.4 any)) ;; Optionally configure the narrowing key. ;; Both \u0026lt; and C-+ work reasonably well. (setq consult-narrow-key \u0026#34;\u0026lt;\u0026#34;) ;; \u0026#34;C-+\u0026#34; ;; Optionally make narrowing help available in the minibuffer. ;; You may want to use `embark-prefix-help-command\u0026#39; or which-key instead. ;; (define-key consult-narrow-map (vconcat consult-narrow-key \u0026#34;?\u0026#34;) #\u0026#39;consult-narrow-help) ;; By default `consult-project-function\u0026#39; uses `project-root\u0026#39; from project.el. ;; Optionally configure a different project root function. ;;;; 1. project.el (the default) ;; (setq consult-project-function #\u0026#39;consult--default-project--function) ;;;; 2. vc.el (vc-root-dir) ;; (setq consult-project-function (lambda (_) (vc-root-dir))) ;;;; 3. locate-dominating-file ;; (setq consult-project-function (lambda (_) (locate-dominating-file \u0026#34;.\u0026#34; \u0026#34;.git\u0026#34;))) ;;;; 4. projectile.el (projectile-project-root) ;; (autoload \u0026#39;projectile-project-root \u0026#34;projectile\u0026#34;) ;; (setq consult-project-function (lambda (_) (projectile-project-root))) ;;;; 5. No project support ;; (setq consult-project-function nil) ) Figure 13: consult-buffer\nFigure 14: consult-flymake\nFigure 15: consult-yank-pop\nFigure 16: consult-outline\nCorfu Corfu enhances in-buffer completion with a small completion popup. The current candidates are shown in a popup below or above the point. The candidates can be selected by moving up and down. Corfu is the minimalistic in-buffer completion counterpart of the Vertico minibuffer UI5.\nInstallation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 (use-package corfu ;; Optional customizations ;; :custom ;; (corfu-cycle t) ;; Enable cycling for `corfu-next/previous\u0026#39; ;; (corfu-auto t) ;; Enable auto completion ;; (corfu-separator ?\\s) ;; Orderless field separator ;; (corfu-quit-at-boundary nil) ;; Never quit at completion boundary ;; (corfu-quit-no-match nil) ;; Never quit, even if there is no match ;; (corfu-preview-current nil) ;; Disable current candidate preview ;; (corfu-preselect \u0026#39;prompt) ;; Preselect the prompt ;; (corfu-on-exact-match nil) ;; Configure handling of exact matches ;; (corfu-scroll-margin 5) ;; Use scroll margin ;; Enable Corfu only for certain modes. ;; :hook ((prog-mode . corfu-mode) ;; (shell-mode . corfu-mode) ;; (eshell-mode . corfu-mode)) ;; Recommended: Enable Corfu globally. This is recommended since Dabbrev can ;; be used globally (M-/). See also the customization variable ;; `global-corfu-modes\u0026#39; to exclude certain modes. :init (global-corfu-mode)) ;; A few more useful configurations... (use-package emacs :init ;; TAB cycle if there are only few candidates (setq completion-cycle-threshold 3) ;; Emacs 28: Hide commands in M-x which do not apply to the current mode. ;; Corfu commands are hidden, since they are not supposed to be used via M-x. ;; (setq read-extended-command-predicate ;; #\u0026#39;command-completion-default-include-p) ;; Enable indentation+completion using the TAB key. ;; `completion-at-point\u0026#39; is often bound to M-TAB. (setq tab-always-indent \u0026#39;complete)) ;; Use Dabbrev with Corfu! (use-package dabbrev ;; Swap M-/ and C-M-/ :bind ((\u0026#34;M-/\u0026#34; . dabbrev-completion) (\u0026#34;C-M-/\u0026#34; . dabbrev-expand)) :config (add-to-list \u0026#39;dabbrev-ignored-buffer-regexps \u0026#34;\\\\` \u0026#34;) ;; Since 29.1, use `dabbrev-ignored-buffer-regexps\u0026#39; on older. (add-to-list \u0026#39;dabbrev-ignored-buffer-modes \u0026#39;doc-view-mode) (add-to-list \u0026#39;dabbrev-ignored-buffer-modes \u0026#39;pdf-view-mode) Figure 17: corfu completion\nBy default, when typing, press TAB to start the completion, use C-p or C-n (C-j or C-k can also be used).\nEnable completion in the minibuffer 1 2 3 4 5 6 7 8 9 10 (defun corfu-enable-always-in-minibuffer () \u0026#34;Enable Corfu in the minibuffer if Vertico/Mct are not active.\u0026#34; (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) (add-hook \u0026#39;minibuffer-setup-hook #\u0026#39;corfu-enable-always-in-minibuffer 1) This will enable corfu as long as there\u0026rsquo;s no other completion active.\nnerd-icons-corfu Nerd-icons-corfu.el is a library for adding icons to completions in Corfu. It uses nerd-icons.el under the hood and, as such, works on both GUI and terminal6.\n1 2 3 4 5 6 7 8 9 (use-package nerd-icons-corfu :ensure :config (add-to-list \u0026#39;corfu-margin-formatters #\u0026#39;nerd-icons-corfu-formatter) (setq nerd-icons-corfu-mapping \u0026#39;((array :style \u0026#34;cod\u0026#34; :icon \u0026#34;symbol_array\u0026#34; :face font-lock-type-face) (boolean :style \u0026#34;cod\u0026#34; :icon \u0026#34;symbol_boolean\u0026#34; :face font-lock-builtin-face) ;; ... (t :style \u0026#34;cod\u0026#34; :icon \u0026#34;code\u0026#34; :face font-lock-warning-face)))) Figure 18: nerd-icons-corfu\nCape Cape provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI. The completion backends used by completion-at-point are so called completion-at-point-functions (Capfs)7.\nConfiguration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 ;; Add extensions (use-package cape ;; Bind dedicated completion commands ;; Alternative prefix keys: C-c p, M-p, M-+, ... :bind ((\u0026#34;C-c p p\u0026#34; . completion-at-point) ;; capf (\u0026#34;C-c p t\u0026#34; . complete-tag) ;; etags (\u0026#34;C-c p d\u0026#34; . cape-dabbrev) ;; or dabbrev-completion (\u0026#34;C-c p h\u0026#34; . cape-history) (\u0026#34;C-c p f\u0026#34; . cape-file) (\u0026#34;C-c p k\u0026#34; . cape-keyword) (\u0026#34;C-c p s\u0026#34; . cape-elisp-symbol) (\u0026#34;C-c p e\u0026#34; . cape-elisp-block) (\u0026#34;C-c p a\u0026#34; . cape-abbrev) (\u0026#34;C-c p l\u0026#34; . cape-line) (\u0026#34;C-c p w\u0026#34; . cape-dict) (\u0026#34;C-c p :\u0026#34; . cape-emoji) (\u0026#34;C-c p \\\\\u0026#34; . cape-tex) (\u0026#34;C-c p _\u0026#34; . cape-tex) (\u0026#34;C-c p ^\u0026#34; . cape-tex) (\u0026#34;C-c p \u0026amp;\u0026#34; . cape-sgml) (\u0026#34;C-c p r\u0026#34; . cape-rfc1345)) :init ;; Add to the global default value of `completion-at-point-functions\u0026#39; which is ;; used by `completion-at-point\u0026#39;. The order of the functions matters, the ;; first function returning a result wins. Note that the list of buffer-local ;; completion functions takes precedence over the global list. (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-dabbrev) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-file) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-elisp-block) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-history) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-keyword) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-tex) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-sgml) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-rfc1345) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-abbrev) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-dict) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-elisp-symbol) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-line) ) https://github.com/minad/vertico\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/minad/marginalia\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/oantolin/orderless\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/minad/consult\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/minad/corfu\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/LuigiPiucco/nerd-icons-corfu\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/minad/cape\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/emacs-vertico/","summary":"Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The focus of Vertico is to provide a UI which behaves correctly under all circumstances. By reusing the built-in facilities system, Vertico achieves full compatibility with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extendable and modular. Additional enhancements are available as extensions or complementary packages.","title":"Emacs vertico"},{"content":"This is a series of post about external Emacs packages that I use.\nAvy avy is a GNU Emacs package for jumping to visible text using a char-based decision tree.\ninstalling with use-package 1 2 3 4 5 6 7 (use-package avy :ensure ;; when `use-package-always-ensure\u0026#39; is nil :bind ((\u0026#34;C-:\u0026#34; . avy-goto-char) (\u0026#34;C-\u0026#39;\u0026#34; . avy-goto-char2) (\u0026#34;M-g f\u0026#34; . avy-goto-line) (\u0026#34;M-g w\u0026#34; . avy-goto-word-1) (\u0026#34;M-g e\u0026#34; . avy-goto-word-0))) Notes: for evil user, theres a command evil-avy-goto*. for evil user 1 2 3 4 5 6 7 (use-package avy :after evil :ensure ;; when `use-package-always-ensure\u0026#39; is nil :bind (([remap goto-char] . evil-avy-goto-char) ([remap goto-line] . evil-avy-goto-line) (\u0026#34;M-g l\u0026#34; . evil-avy-goto-line))) ","permalink":"https://alexforsale.github.io/posts/emacs-avy/","summary":"This is a series of post about external Emacs packages that I use.\nAvy avy is a GNU Emacs package for jumping to visible text using a char-based decision tree.\ninstalling with use-package 1 2 3 4 5 6 7 (use-package avy :ensure ;; when `use-package-always-ensure\u0026#39; is nil :bind ((\u0026#34;C-:\u0026#34; . avy-goto-char) (\u0026#34;C-\u0026#39;\u0026#34; . avy-goto-char2) (\u0026#34;M-g f\u0026#34; . avy-goto-line) (\u0026#34;M-g w\u0026#34; . avy-goto-word-1) (\u0026#34;M-g e\u0026#34; . avy-goto-word-0))) Notes: for evil user, theres a command evil-avy-goto*.","title":"Emacs avy"},{"content":"What is use-package anyway? Simply put, it\u0026rsquo;s a macro for easier package management within Emacs. I\u0026rsquo;ve used this for a while, and for me this is much more manageable than the default package declaration.\nHow to use it? First we\u0026rsquo;ll need to activate it, from your Emacs init.el file:\n1 (require \u0026#39;use-package) And since we\u0026rsquo;ll mostly use this for external package, also add:\n1 (setq use-package-always-ensure t) After that, use-package is ready to use. For example, installing which-key is simply by:\n1 (use-package which-key) If you don\u0026rsquo;t enable the variable use-package-always-ensure, then we\u0026rsquo;ll need to also use the keyword :ensure, to make sure the package is downloaded.\n1 2 (use-package which-key :ensure) Useful external packages Which-key Just like our example earlier, which-key is my most needed external packages. It display the keybinding following our incomplete command (or in Emacs term: a prefix). For example, in default Emacs when we want to open file we use the C-x C-f chord. When we input C-x and pause, nothing really shown.\nFigure 1: default emacs prefix\nThere\u0026rsquo;s only C-x displayed in the echo area (in the bottom), but with which-key-mode activated:\nFigure 2: which-key-mode\nFurther which-key customization 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 (use-package which-key :ensure :custom (which-key-lighter \u0026#34;\u0026#34;) (which-key-sort-order #\u0026#39;which-key-key-order-alpha) (which-key-sort-uppercase-first nil) (which-key-add-column-padding 1) (which-key-max-display-columns nil) (which-key-min-display-lines 6) (which-key-compute-remaps t) (which-key-side-window-slot -10) (which-key-separator \u0026#34; → \u0026#34;) (which-key-allow-evil-operators t) (which-key-use-C-h-commands t) (which-key-show-remaining-keys t) (which-key-show-prefix \u0026#39;bottom) :config (which-key-mode) (which-key-setup-side-window-bottom) (which-key-setup-minibuffer) (define-key which-key-mode-map (kbd \u0026#34;C-x \u0026lt;f5\u0026gt;\u0026#34;) \u0026#39;which-key-C-h-dispatch)) This is the setup I used for which-key.\n","permalink":"https://alexforsale.github.io/posts/emacs-builtin-use-package/","summary":"What is use-package anyway? Simply put, it\u0026rsquo;s a macro for easier package management within Emacs. I\u0026rsquo;ve used this for a while, and for me this is much more manageable than the default package declaration.\nHow to use it? First we\u0026rsquo;ll need to activate it, from your Emacs init.el file:\n1 (require \u0026#39;use-package) And since we\u0026rsquo;ll mostly use this for external package, also add:\n1 (setq use-package-always-ensure t) After that, use-package is ready to use.","title":"Emacs package management with use-package"},{"content":"About This site is build with Hugo which is a static site generator using markdown. The usual way of doing github action with hugo is using the actions-hugo workflow. Since I\u0026rsquo;m using org-mode for literally everything, it\u0026rsquo;s only natural that I also use it for blogging.\nFigure 1: Deployment to github pages\nSetup Create a script for exporting org-files to markdown We need to be able to export the org-mode files into markdown format. Depending on how the files are organized, we need to have a function that could export them. Here I\u0026rsquo;m using per file layout1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 (require \u0026#39;package) (add-to-list \u0026#39;package-archives \u0026#39;(\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;) t) (package-refresh-contents) (package-initialize) (package-install \u0026#39;ox-hugo) (require \u0026#39;ox-hugo) (defun export-org-files () \u0026#34;Export files to hugo markdown.\u0026#34; (interactive) (dolist (f (append (file-expand-wildcards \u0026#34;content-org/**/*.org\u0026#34;))) (with-current-buffer (find-file f) (org-hugo-export-to-md)))) Code Snippet 1: build.el Things to note:\nThe packages needed by Emacs for exporting: ox-hugo Here my org-mode files are placed in ./content-org/ with each posts in their own subdirectory, so the function required for exporting is org-hugo-export-to-md, it should be different when using another type of layout. Create a makefile This will be called by the github action workflow.\n1 2 3 4 5 .PHONY: all all: @echo \u0026#34;Publishing org files...\u0026#34; emacs -Q --batch --load scripts/build.el --funcall export-org-files Code Snippet 2: Makefile Things to note:\nThis script is calling the emacs-lisp file we\u0026rsquo;ve created earlier. Create GIthub action workflow 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 name: hugo CI on: push: branches: [ main ] jobs: build: runs-on: ubuntu-latest permissions: contents: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: checkout repository uses: actions/checkout@v4 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: install emacs uses: purcell/setup-emacs@master with: version: snapshot - name: export all org-mode files run: make all - name: build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.PERSONAL_TOKEN }} publish_dir: ./public Code Snippet 3: deploy.yml Things to note:\nsecrets.PERSONAL_TOKEN must be set within the repository settings in Github. Figure 2: secrets and variable\nhttps://ox-hugo.scripter.co/doc/blogging-flow/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/github-action-hugo-emacs/","summary":"About This site is build with Hugo which is a static site generator using markdown. The usual way of doing github action with hugo is using the actions-hugo workflow. Since I\u0026rsquo;m using org-mode for literally everything, it\u0026rsquo;s only natural that I also use it for blogging.\nFigure 1: Deployment to github pages\nSetup Create a script for exporting org-files to markdown We need to be able to export the org-mode files into markdown format.","title":"Github Action for hugo static site using Emacs"},{"content":" Hyprland is a wlroots-based tiling Wayland compositor written in C++. Noteworthy features of Hyprland include dynamic tiling, tabbed windows, a clean and readable C++ code-base, and a custom renderer that provides window animations, rounded corners, and Dual-Kawase Blur on transparent windows. General usage and configuration is thoroughly documented at Hyprland wiki1.\nStarting Hyprland Hyprland can be started via a display manager (GDM, Lightdm etc), or via the command line (in archlinux it\u0026rsquo;s /usr/bin/Hyprland, notice the capital H).\nConfiguration The default configuration file is ~/.config/hypr/hyprland.conf, though it support splitting the configuration into multiple files and including them in the main file (hyprland.conf). If you\u0026rsquo;re familiar with i3wm, this configuration is similar to that. Either way, the wiki provides enough information to start configuring.\nDefault configuration file # This is an example Hyprland config file. # # Refer to the wiki for more information. # # Please note not all available settings / options are set here. # For a full list, see the wiki # # See https://wiki.hyprland.org/Configuring/Monitors/ monitor=,preferred,auto,auto # See https://wiki.hyprland.org/Configuring/Keywords/ for more # Execute your favorite apps at launch # exec-once = waybar \u0026amp; hyprpaper \u0026amp; firefox # Source a file (multi-file configs) # source = ~/.config/hypr/myColors.conf # Set programs that you use $terminal = kitty $fileManager = dolphin $menu = wofi --show drun # Some default env vars. env = XCURSOR_SIZE,24 env = QT_QPA_PLATFORMTHEME,qt5ct # change to qt6ct if you have that # For all categories, see https://wiki.hyprland.org/Configuring/Variables/ input { kb_layout = us kb_variant = kb_model = kb_options = kb_rules = follow_mouse = 1 touchpad { natural_scroll = false } sensitivity = 0 # -1.0 - 1.0, 0 means no modification. } general { # See https://wiki.hyprland.org/Configuring/Variables/ for more gaps_in = 5 gaps_out = 20 border_size = 2 col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg col.inactive_border = rgba(595959aa) layout = dwindle # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on allow_tearing = false } decoration { # See https://wiki.hyprland.org/Configuring/Variables/ for more rounding = 10 blur { enabled = true size = 3 passes = 1 vibrancy = 0.1696 } drop_shadow = true shadow_range = 4 shadow_render_power = 3 col.shadow = rgba(1a1a1aee) } animations { enabled = true # Some default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more bezier = myBezier, 0.05, 0.9, 0.1, 1.05 animation = windows, 1, 7, myBezier animation = windowsOut, 1, 7, default, popin 80% animation = border, 1, 10, default animation = borderangle, 1, 8, default animation = fade, 1, 7, default animation = workspaces, 1, 6, default } dwindle { # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more pseudotile = true # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below preserve_split = true # you probably want this } master { # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more new_is_master = true } gestures { # See https://wiki.hyprland.org/Configuring/Variables/ for more workspace_swipe = false } misc { # See https://wiki.hyprland.org/Configuring/Variables/ for more force_default_wallpaper = -1 # Set to 0 or 1 to disable the anime mascot wallpapers } # Example per-device config # See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more device:epic-mouse-v1 { sensitivity = -0.5 } # Example windowrule v1 # windowrule = float, ^(kitty)$ # Example windowrule v2 # windowrulev2 = float,class:^(kitty)$,title:^(kitty)$ # See https://wiki.hyprland.org/Configuring/Window-Rules/ for more windowrulev2 = nomaximizerequest, class:.* # You\u0026#39;ll probably like this. # See https://wiki.hyprland.org/Configuring/Keywords/ for more $mainMod = SUPER # Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more bind = $mainMod, Q, exec, $terminal bind = $mainMod, C, killactive, bind = $mainMod, M, exit, bind = $mainMod, E, exec, $fileManager bind = $mainMod, V, togglefloating, bind = $mainMod, R, exec, $menu bind = $mainMod, P, pseudo, # dwindle bind = $mainMod, J, togglesplit, # dwindle # Move focus with mainMod + arrow keys bind = $mainMod, left, movefocus, l bind = $mainMod, right, movefocus, r bind = $mainMod, up, movefocus, u bind = $mainMod, down, movefocus, d # Switch workspaces with mainMod + [0-9] bind = $mainMod, 1, workspace, 1 bind = $mainMod, 2, workspace, 2 bind = $mainMod, 3, workspace, 3 bind = $mainMod, 4, workspace, 4 bind = $mainMod, 5, workspace, 5 bind = $mainMod, 6, workspace, 6 bind = $mainMod, 7, workspace, 7 bind = $mainMod, 8, workspace, 8 bind = $mainMod, 9, workspace, 9 bind = $mainMod, 0, workspace, 10 # Move active window to a workspace with mainMod + SHIFT + [0-9] bind = $mainMod SHIFT, 1, movetoworkspace, 1 bind = $mainMod SHIFT, 2, movetoworkspace, 2 bind = $mainMod SHIFT, 3, movetoworkspace, 3 bind = $mainMod SHIFT, 4, movetoworkspace, 4 bind = $mainMod SHIFT, 5, movetoworkspace, 5 bind = $mainMod SHIFT, 6, movetoworkspace, 6 bind = $mainMod SHIFT, 7, movetoworkspace, 7 bind = $mainMod SHIFT, 8, movetoworkspace, 8 bind = $mainMod SHIFT, 9, movetoworkspace, 9 bind = $mainMod SHIFT, 0, movetoworkspace, 10 # Example special workspace (scratchpad) bind = $mainMod, S, togglespecialworkspace, magic bind = $mainMod SHIFT, S, movetoworkspace, special:magic # Scroll through existing workspaces with mainMod + scroll bind = $mainMod, mouse_down, workspace, e+1 bind = $mainMod, mouse_up, workspace, e-1 # Move/resize windows with mainMod + LMB/RMB and dragging bindm = $mainMod, mouse:272, movewindow bindm = $mainMod, mouse:273, resizewindow Code Snippet 1: default configuration file If you\u0026rsquo;re planning to start from the default configuration file, here are the packages neccessary:\nkitty a terminal emulator. dolphin File manager used in KDE. wofi Launcher/menu program for wlroots based wayland compositors such as sway. Other packages needed: a text editor and web browser.\nSplit configuration file source = ./hypr.d/monitors.conf source = ./hypr.d/autostart.conf source = ./hypr.d/variables.conf source = ./hypr.d/input.conf source = ./hypr.d/general.conf source = ./hypr.d/decoration.conf source = ./hypr.d/animations.conf source = ./hypr.d/dwindle.conf source = ./hypr.d/master.conf source = ./hypr.d/gestures.conf source = ./hypr.d/binds.conf source = ./hypr.d/misc.conf source = ./hypr.d/devices.conf source = ./hypr.d/windowrule.conf source = ./hypr.d/workspaces.conf source = ./hypr.d/keybindings.conf Code Snippet 2: my split configuration for Hyprland (~/.config/hypr/hyprland.conf) monitors # See https://wiki.hyprland.org/Configuring/Monitors/ monitor=,highrr,auto,1 monitor=eDP-1,1920x1080@60,auto,1 monitor=DP-1,preferred,auto,1 monitor=DP-2,preferred,auto,1 monitor=DP-3,preferred,auto,1 monitor=DP-4,preferred,auto,1 monitor=DP-5,preferred,auto,1 # laptop monitor = HDMI-A-1, highres, auto, 1 Code Snippet 3: monitor configuration This is my monitors from all the machines that uses Hyprland.\nAutostarting applications exec-once can also be use to auto start applications that should be run at the start of the sessions.\n# Execute your favorite apps at launch exec-once=systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP QT_QPA_PLATFORMTHEME exec-once=dbus-update-activation-environment --systemd --all \u0026amp; exec-once=blueman-applet \u0026amp; exec-once=nm-applet --indicator \u0026amp; exec-once=/usr/lib/polkit-kde-authentication-agent-1 \u0026amp; exec-once=gnome-keyring-daemon --components=pkcs11,secrets,ssh -r -d \u0026amp; exec-once=dbus-launch --sh-syntax --exit-with-session udiskie -t \u0026amp; exec-once=dbus-launch --sh-syntax --exit-with-session dunst -conf ~/.config/dunst/dunstrc \u0026amp; exec-once=/usr/lib/kdeconnectd \u0026amp; exec-once=kdeconnect-indicator \u0026amp; exec-once=waybar \u0026amp; exec-once=hyprpaper \u0026amp; exec-once = wl-paste --type text --watch cliphist store \u0026amp; exec-once = wl-paste --type image --watch cliphist store \u0026amp; exec-once=hyprctl setcursor Bibata-Modern-Classic 24 exec-once=hyprshade auto \u0026amp; exec-once=thunar --daemon \u0026amp; exec-once = hypridle # gtk settings exec-once = gsettings set org.gnome.desktop.interface font-name \u0026#34;JetBrainsMonoNL Nerd Font Mono 10\u0026#34; exec-once = gsettings set org.gnome.desktop.interface cursor-theme Bibata-Modern-Classic exec-once = gsettings set org.gnome.desktop.interface cursor-size 24 exec-once = gsettings set org.gnome.desktop.interface gtk-theme Breeze exec-once = gsettings set org.gnome.desktop.interface gtk-key-theme Emacs exec-once = gsettings set org.gnome.desktop.interface icon-theme Papirus exec-once = gsettings set org.gnome.desktop.sound theme-name freedesktop exec-once = gsettings set org.gnome.desktop.sound input-feedback-sounds true exec-once = gsettings set org.gnome.desktop.sound allow-volume-above-100-percent true Code Snippet 4: autostarting apps in Hyprland Not so sure if the \u0026amp; is needed, it is for script (shells, or xprofile, etc.).\nPackages used:\nBlueman : a full featured Bluetooth manager written in Python and using GTK.\nnetwork-manager-applet : Useful for laptop.\npolkit-kde-agent : The recommended polkit by the wiki, there\u0026rsquo;s also other alternatives.\nkdeconnect : for quick file sharing between pc and android. Also work for other kind of sharing.\ngnome-keyring : a collection of components in GNOME that store secrets, passwords, keys, certificates and make them available to applications.\nWaybar : Highly customizable Wayland bar for Sway and Wlroots based compositors.\ncliphist : wayland clipboard manager with support for multimedia.\nhyprshade : Hyprland shader configuration tool.\nhypridle and hyprlock : Hyprland\u0026rsquo;s idle daemon and Hyprland\u0026rsquo;s GPU-accelerated screen locking utility.\nttf-jetbrains-mono-nerd : Jetbrains mono, or get it from the github repo.\npapirus-icon-theme : Papirus icon theme.\nsound theme freedesktop : The usual Linux sound theme.\nEnvironment variables Unlike other window manager where usually environment variables are set from the shell, in Hyprland we can set the variables from within the configuration files2. Common variables:\n# Set programs that you use $terminal = alacritty $fileManager = thunar $menu = rofi -show drun -theme apps $editor = emacsclient -c -a emacs $mail = thunderbird $browser = firefox # Some default env vars. env = QT_QPA_PLATFORM,xcb env = QT_QPA_PLATFORMTHEME,qt5ct # change to qt6ct if you have that env = QT_AUTO_SCREEN_SCALE_FACTOR,1 env = QT_WAYLAND_DISABLE_WINDOWDECORATION,1 env = SDL_VIDEODRIVER,wayland env = CLUTTER_BACKEND,wayland env = GTK_THEME,Breeze-Dark env = GTK2_RC_FILES,/usr/share/themes/Breeze-Dark/gtk-2.0 env = XCURSOR_THEME,Bibata-Modern-Classic env = XCURSOR_SIZE,24 # wallpapers $w1 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/ign_duaAnime.png\u0026#34; $w2 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/ign_chainsaw-man.png\u0026#34; $w3 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/ign_animeGirlSleeping.png\u0026#34; $w4 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/ign_girlWithHeadphones.png\u0026#34; $w5 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/manga/Sora-no-Otoshimono/kazane_hiyori_angel_by_sakurakiel_d4cnyy6.png\u0026#34; $w6 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/nord_scenary.png\u0026#34; $w7 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/wild.png\u0026#34; $w8 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/waves.jpg\u0026#34; $w9 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/subtle_ferns.jpg\u0026#34; $w10 = hyprctl hyprpaper wallpaper \u0026#34;,~/.local/share/wallpapers/nord/street_blues.png\u0026#34; Code Snippet 5: example of setting environment variable in Hyprland (~/.config/hypr/hypr.d/variables.conf) but try to start Hyprland without any variables set and see which is missing. Some variables such as GTK_THEME, XCURSOR_THEME, and XCURSOR_SIZE can be set via other methods (gsettings, GTK configuration file, etc).\nPackages used:\nhyprpaper wallpaper utility for hyprland. Breeze theme Breeze and breeze-icons. bibata-cursor-theme Material Based Cursor Theme. Alacritty GPU-accelerated terminal emulator written in Rust. rofi use this version of rofi for wayland. Thunar modern file manager for the Xfce Desktop Environment. Emacs obviously. Thunderbird open source email, news, and chat client previously developed by the Mozilla Foundation. Firefox popular open source graphical web browser from Mozilla. My wallpaper collection mostly from deviantart. In case you\u0026rsquo;re not using any display managers, it\u0026rsquo;s important to also import the environment variables into systemd (assuming your distribution uses systemd, which is the norm nowadays). Add this into the configuration file:\nexec-once = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP QT_QPA_PLATFORMTHEME Code Snippet 6: systemd: environment import exec-once, just like the name, will only execute the command once, only when Hyprland is started. And while we\u0026rsquo;re at it, also update environment used for D-bus session service:\nexec-once = dbus-update-activation-environment --systemd --all Code Snippet 7: activating dbus environment In case you\u0026rsquo;re wondering what kind of variables are used, run dbus-update-activation-environment --systemd --all --verbose from the terminal to see the output.\nInput settings input { kb_layout = us kb_variant = kb_model = kb_options = kb_rules = repeat_rate = 25 repeat_delay = 600 follow_mouse = 1 touchpad { natural_scroll = true disable_while_typing = true tap-to-click = true } sensitivity = 0 # -1.0 - 1.0, 0 means no modification. } Code Snippet 8: input settings The touchpad section is useful, but this only sets for hyprland, if you use any display managers, it needs to be configured inside the display manager configuration.\nworkspace_swipe = true workspace_swipe_fingers = 3 } Code Snippet 9: gestures general section #+caption: general section general { # See https://wiki.hyprland.org/Configuring/Variables/ for more gaps_in = 5 gaps_out = 5 border_size = 2 #col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg col.active_border = rgba(88c0d0ff) rgba(b48eadff) rgba(ebcb8bff) rgba(a3be8cff) 45deg #col.inactive_border = rgba(595959aa) col.inactive_border=0xff434c5e col.nogroup_border=0xff89dceb col.nogroup_border_active=0xfff9e2af layout = master # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on allow_tearing = false } Aside from the colors, I just copy everything from the default configuration file.\ngroup section group { insert_after_current = true focus_removed_window = true col.border_active = 0x66ffff00 col.border_inactive = 0x66777700 col.border_locked_active = 0x66ff5500 col.border_locked_inactive = 0x66775500 groupbar { enabled = true font_family = \u0026#34;JetBrainsMonoNL Nerd Font Mono 10\u0026#34; font_size = 10 gradients = true height = 14 priority = 3 render_titles = true scrolling = true text_color = 0xffeceff4 col.active = 0x554c566a col.inactive = 0x55434c5e col.locked_active = 0x66ff5500 col.locked_inactive = 0x66775500 } } Code Snippet 10: group decoration decoration { # See https://wiki.hyprland.org/Configuring/Variables/ for more rounding = 10 blur { enabled = true size = 3 passes = 1 } drop_shadow = yes shadow_range = 4 shadow_render_power = 3 #col.shadow = rgba(1a1a1aee) col.shadow=0xee1a1a1a col.shadow_inactive=0xee1a1a1a } Code Snippet 11: decoration section I suppose the decoration section is also from the default.\nanimation section animations { enabled = true # Some default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more bezier = myBezier, 0.05, 0.9, 0.1, 1.05 animation = windows, 1, 7, myBezier animation = windowsOut, 1, 7, default, popin 80% animation = border, 1, 10, default animation = borderangle, 1, 8, default animation = fade, 1, 7, default animation = workspaces, 1, 6, default } Code Snippet 12: animation Dwindle layout dwindle { # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more pseudotile = yes # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below preserve_split = yes # you probably want this smart_split = yes } Code Snippet 13: dwindle layout Dwindle layout is also using the default.\nMaster layout master { # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more new_is_master = true } Code Snippet 14: master layout The same for the master layout\ngestures section gestures { # See https://wiki.hyprland.org/Configuring/Variables/ for more workspace_swipe = true workspace_swipe_fingers = 3 } Code Snippet 15: gestures binds section binds { workspace_back_and_forth = false allow_workspace_cycles = true } Code Snippet 16: binds misc section misc { # See https://wiki.hyprland.org/Configuring/Variables/ for more force_default_wallpaper = -1 # Set to 0 or 1 to disable the anime mascot wallpapers disable_hyprland_logo = false disable_splash_rendering = false mouse_move_enables_dpms = true key_press_enables_dpms = true animate_manual_resizes = true mouse_move_focuses_monitor = true } Code Snippet 17: misc section I set force_default_wallpaper to -1 to disable the anime mascot.\ndevices section # See https://wiki.hyprland.org/Configuring/Keywords/#executing for more device:epic-mouse-v1 { sensitivity = -0.5 } Code Snippet 18: devices Window rules windowrulev2 = nomaximizerequest, class:.* # You\u0026#39;ll probably like this. windowrulev2 = opacity 0.8, class:.* windowrulev2 = float,class:^(pavucontrol)$ windowrulev2 = size 50%,class:^(pavucontrol)$ windowrulev2 = center,class:^(pavucontrol)$ windowrulev2 = float,class:(org.kde.polkit-kde-authentication-agent-1) windowrulev2 = center,class:(org.kde.polkit-kde-authentication-agent-1) windowrulev2 = float,class:(blueman) windowrulev2 = center,class:(blueman) windowrulev2 = size 50%,class:(blueman) windowrulev2 = float,class:(thunderbird),title:(status) windowrulev2 = float,class:(thunderbird),title:(.*)(Reminders) windowrulev2 = float,class:(thunderbird),title:(Write:.*) windowrulev2 = float,class:(thunderbird),title:(Send.*) windowrulev2 = float,class:(thunderbird),title:(Inbox.*) windowrulev2 = tile,class:(thunderbird),initialTitle(Mozilla Thunderbird) windowrulev2 = float,class:(thunderbird) windowrulev2 = float,class:(Msgcompose.*) windowrulev2 = idleinhibit always, class:firefox title:(.*)(- YouTube) windowrulev2 = opacity 1, class:firefox title:(.*)(- YouTube) windowrulev2 = float, class:(thunderbird),title(.*)(Reminders)$ windowrulev2 = float,class:(QtPass) windowrulev2 = float,class:(zoom) windowrulev2 = float, class:(file-roller) windowrulev2 = float,class:(ncmpcpp) windowrulev2 = center,class:(ncmpcpp) windowrulev2 = size 50%,class:(ncmpcpp) windowrulev2 = float, class:(khal) windowrulev2 = size 40%, class:(khal) windowrulev2 = move onscreen cursor 50% 10%, class:(khal) windowrulev2 = workspace 4, class:(astroid) windowrulev2 = maximize, class:(astroid) windowrulev2 = workspace 4, class:(thunderbird) windowrulev2 = maximize, class:(thunderbird) windowrulev2 = workspace 5, class:(thunar) windowrulev2 = workspace 7,class:(vlc) windowrulev2 = opacity 1,class:(vlc) windowrulev2 = idleinhibit always,class:(vlc) windowrulev2 = float, workspace 8, class:(org.remmina.Remmina) windowrulev2 = workspace 9,class:^(com.transmissionbt.transmission).* windowrulev2 = float,title:(Torrent.*) windowrulev2 = opacity 1, class:(zoom) windowrulev2 = workspace 10, class:(zoom) windowrulev2 = opacity 1, class:(zoom), title:(Settings) windowrulev2 = opacity 1, class:(zoom), title:(Zoom Meeting) windowrulev2 = float, class:(org.kde.kdeconnect.app) windowrulev2 = float, title:(File Operation Progress) windowrulev2 = float, class:(htop) windowrulev2 = size 100% 40%, class:(htop) windowrulev2 = move 0 40, class:(htop) windowrulev2 = float, class:(nmtui) #windowrulev2 = size 100% 40%, class:(htop) #windowrulev2 = move 0 40, class:(htop) windowrulev2 = float, class:(vim) windowrulev2 = maximize, class:(vim) windowrulev2 = maximize, class:(nw-emacs) windowrulev2 = float, class:(one.alynx.showmethekey), title:(Show Me The Key) windowrulev2 = nofocus, class:(showmethekey-gtk), title:(Floating Window - Show Me The Key) windowrulev2 = opacity 0.4, class:(showmethekey-gtk), title:(Floating Window - Show Me The Key) windowrulev2 = center, class:(showmethekey-gtk), title:(Floating Window - Show Me The Key) windowrulev2 = float, class:(showmethekey-gtk), title:(Floating Window - Show Me The Key) windowrulev2 = pin, class:(showmethekey-gtk), title:(Floating Window - Show Me The Key) windowrulev2 = size 100% 10%, class:(showmethekey-gtk), title:(Floating Window - Show Me The Key) windowrulev2 = move 0 90%, class:(showmethekey-gtk), title:(Floating Window - Show Me The Key) Code Snippet 19: window rules I think this section of the configuration file that I change the most. Always refer to the wiki in case there\u0026rsquo;s an update. I use idleinhibit for window that should not activate the screensaver. Use hyprprop which function just like xprop in Xorg to determine the window class or title.\nworkspaces binds { workspace_back_and_forth = false allow_workspace_cycles = true } Code Snippet 20: bind configuration workspace = 1, name:terminal, monitor:eDP-1 #, on-created-empty:alacritty workspace = 2, name:code, monitor:eDP-1 #, on-created-empty:emacsclient -c -a emacs workspace = 3, name:web, monitor:eDP-1 #, on-created-empty:firefox workspace = 4, name:message, monitor:eDP-1 workspace = 5, name:file, monitor:HDMI-A-1, monitor:DP-1, default:true workspace = 6, name:office, monitor:HDMI-A-1 workspace = 7, name:fun, monitor:HDMI-A-1 workspace = 8, name:remote, monitor:HDMI-A-1 workspace = 9, name:torrent, monitor:HDMI-A-1 workspace = 10, name:zoom, monitor:HDMI-A-1 workspace = special:scratchpad Code Snippet 21: workspaces This section still needs tweaking. Basically, it\u0026rsquo;s fine when I\u0026rsquo;m on a single monitor. But I haven\u0026rsquo;t got the time to test it in multi monitors setup, it would be better if I can assign multiple monitors into a workspace.\nKeybindings # See https://wiki.hyprland.org/Configuring/Keywords/ for more $mainMod = SUPER # Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more bind = $mainMod, Return, exec, $terminal bind = $mainMod, E, exec, $fileManager bind = $mainMod, F4, killactive, bind = ALT, F4, killactive, bind = $mainMod, Q, exec, ~/.local/bin/rofi-logout bind = $mainMod Alt, Q, exec, hyprlock bind = $mainMod, D, exec, $menu bind = $mainMod, C, exec, cliphist list | rofi -dmenu -p \u0026#34;Clipboard:\u0026#34; -theme \u0026#34;clipboard\u0026#34; | cliphist decode | wl-copy bind = $mainMod, Comma, exec, rofi -show emoji bind = $mainMod Shift, V, exec, pavucontrol bind = $mainMod, F, fullscreen, 0 Code Snippet 22: main keybindings Window motions\nbind = $mainMod Shift, F, fullscreen, 1 bind = $mainMod Control, F, fakefullscreen, 0 bind = $mainMod, Space, togglefloating, # Move focus with mainMod + arrow keys bind = $mainMod, left, movefocus, l bind = $mainMod, right, movefocus, r bind = $mainMod, up, movefocus, u bind = $mainMod, down, movefocus, d bind = $mainMod, H, movefocus, l bind = $mainMod, L, movefocus, r bind = $mainMod, K, movefocus, u bind = $mainMod, J, movefocus, d # resize binde = $mainMod Control, H, resizeactive, -10 0 binde = $mainMod Control, J, resizeactive, 0 10 binde = $mainMod Control, K, resizeactive, 0 -10 binde = $mainMod Control, L, resizeactive, 10 0 binde = $mainMod Control, left, resizeactive, -10 0 binde = $mainMod Control, down, resizeactive, 0 10 binde = $mainMod Control, up, resizeactive, 0 -10 binde = $mainMod Control, right, resizeactive, 10 0 # move window bind = $mainMod Shift, H, movewindow, l bind = $mainMod Shift, J, movewindow, d bind = $mainMod Shift, K, movewindow, u bind = $mainMod Shift, L, movewindow, r # Window split ratio binde = Super, Minus, splitratio, -0.1 binde = Super, Equal, splitratio, 0.1 binde = Super, Semicolon, splitratio, -0.1 binde = Super, Apostrophe, splitratio, 0.1 # Move/resize windows with mainMod + LMB/RMB and dragging bindm = $mainMod, mouse:272, movewindow bindm = $mainMod, mouse:273, resizewindow Code Snippet 23: window keybindings Applications\nbind = $mainMod Alt, M, exec, alacritty --class ncmpcpp -e ncmpcpp bind = $mainMod Alt, H, exec, alacritty --class htop -e htop bind = $mainMod Alt, W, exec, alacritty --class nmtui -e nmtui bind = $mainMod Alt, K, exec, alacritty --class khal -e khal interactive bind = $mainMod Alt, V, exec, alacritty --class vim -e vim bind = $mainMod Shift Alt, N, exec, alacritty --class nw-emacs -e emacsclient -t -a emacs bind = $mainMod Alt, E, exec, emacsclient -c -a emacs -e \u0026#39;(dired (getenv \u0026#34;HOME\u0026#34;))\u0026#39; bind = $mainMod Alt, N, exec, $editor bind = $mainMod Alt, T, exec, $mail bind = $mainMod Alt, P, exec, rofi-pass bind = $mainMod Alt, C, exec, rofi -show calc -modi calc -no-show-match -no-sort -theme calculator bind = $mainMod Alt, B, exec, rofi-rbw bind = $mainMod Alt, f, exec, firefox bind = $mainMod Alt, S, exec, [workspace 10; silent; float] showmethekey-gtk # tesseract bind = SuperShift,T,exec,grim -g \u0026#34;$(slurp -d -c D1E5F4BB -b 1B232866 -s 00000000)\u0026#34; \u0026#34;tmp.png\u0026#34; \u0026amp;\u0026amp; tesseract -l eng \u0026#34;tmp.png\u0026#34; - | wl-copy \u0026amp;\u0026amp; rm \u0026#34;tmp.png\u0026#34; Packages used:\nrofi-logout : a script I made.\npavucontrol : pulseaudio control\nncmpcpp : an mpd client.\nhtop : a cross-platform interactive process viewer.\nnmtui : Network Manager terminal interface.\nkhal : 📆 CLI calendar application.\nvim : a terminal text editor.\nrofi-pass : rofi frontend for pass.\nrofi-rbw : Rofi frontend for Bitwarden.\nshowmethekey : Show keys you typed on screen.\ntesseract : Tesseract Open Source OCR Engine.\nFigure 2: Applications\nmedia keys\nbinde = , XF86AudioRaiseVolume, exec, ~/.local/bin/dunst-volume -i 1 binde = , XF86AudioLowerVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ -1% binde = , XF86AudioLowerVolume, exec, ~/.local/bin/dunst-volume -d 1 bindl = , XF86AudioMute, exec, ~/.local/bin/dunst-volume -t # bindl = , XF86AudioMicMute, exec, pactl set-source-mute @DEFAULT_SOURCE@ toggle bind = , XF86AudioPlay, exec, playerctl play-pause bind = , XF86AudioNext, exec, playerctl next bind = , XF86AudioPrev, exec, playerctl previous # binde = , XF86MonBrightnessUp, exec, brightnessctl set +1% binde = , XF86MonBrightnessUp, exec, ~/.local/bin/dunst-backlight +1% binde = , XF86MonBrightnessDown, exec, ~/.local/bin/dunst-backlight 1%- # binde = , XF86MonBrightnessDown, exec, brightnessctl set 1%- Code Snippet 24: media keys dunst : Lightweight and customizable notification daemon.\nplayerctl : 🎧 mpris media player command-line controller for vlc, mpv, RhythmBox, web browsers, cmus, mpd, spotify and others.\n~/.local/bin/dunst-volume : A script to set volume and also show notification.\n~/.local/bin/dunst-backlight/ : Similar script for backlight.\nPrint Key\nbind= , Print, exec, grim \u0026#34;$(echo ~/Pictures/Screenshots/Screenshot1-$(date +\u0026#39;%Y%m%d_%H%M%S\u0026#39;).png)\u0026#34; bind = Control, Print, exec, grim -g \u0026#34;$(slurp)\u0026#34; - | swappy -f - bind = Alt, Print, exec, kooha Code Snippet 25: print key grim : Grab images from a Wayland compositor.\nslurp : Select a region in a Wayland compositor.\nswappy : A Wayland native snapshot editing tool, inspired by Snappy on macOS.\nkooha : Elegantly record your screen.\nnotification\nbind = $mainMod Alt, grave, exec, dunstctl history-pop bind = $mainMod SHIFT, grave, exec, dunstctl context bind = $mainMod, grave, exec, dunstctl action bind = $mainMod, grave, exec, dunstctl close Code Snippet 26: notification Submaps\nGroup\nbind = $mainMod, G, submap, group submap = group bind = , T, togglegroup bind = $mainMod Control, F, changegroupactive, f bind = $mainMod Control, B, changegroupactive, b # bind = $mainMod Alt, L, lockactivegroup bind = $mainMod, G, lockgroups, toggle bind = $mainMod Alt, G, lockactivegroup, toggle bind = $mainMod Shift, left, moveintogroup, l bind = $mainMod Shift, right, moveintogroup, r bind = $mainMod Shift, up, moveintogroup, u bind = $mainMod Shift, down, moveintogroup, d bind = $mainMod Shift, H, moveintogroup, l bind = $mainMod Shift, L, moveintogroup, r bind = $mainMod Shift, K, moveintogroup, u bind = $mainMod Shift, J, moveintogroup, d bind = $mainMod Control, left, moveoutofgroup, l bind = $mainMod Control, right, moveoutofgroup, r bind = $mainMod Control, up, moveoutofgroup, u bind = $mainMod Control, down, moveoutofgroup, d bind = $mainMod Control, H, moveoutofgroup, l bind = $mainMod Control, L, moveoutofgroup, r bind = $mainMod Control, K, moveoutofgroup, u bind = $mainMod Control, J, moveoutofgroup, d bind = , left, movefocus, l bind = , right, movefocus, r bind = , up, movefocus, u bind = , down, movefocus, d bind = , H, movefocus, l bind = , L, movefocus, r bind = , K, movefocus, u bind = , J, movefocus, d bind = , escape, submap, reset bind = Control, G, submap, reset submap = reset bind = $mainMod Control, F, changegroupactive, f bind = $mainMod Control, B, changegroupactive, b Code Snippet 27: group submap This make window grouped.\nResize\n## Resize bind = $mainMod, R, submap, resize submap = resize ### using arrow key binde = , right, resizeactive, 10 0 binde = , left, resizeactive, -10 0 binde = , up, resizeactive, 0 -10 binde = , down, resizeactive, 0 10 ### using vim key binde = , l, resizeactive, 10 0 binde = , h, resizeactive, -10 0 binde = , k, resizeactive, 0 -10 binde = , j, resizeactive, 0 10 bind = Control, G, submap, reset bind = , escape, submap, reset submap = reset dwindle layout keybindings\nbind = $mainMod, P, pseudo, # dwindle bind = $mainMod, S, togglesplit, # dwindle bind = Alt Control Shift, Tab, layoutmsg, swapprev master layout keybindings\n# master bind = $mainMod Alt, TAB, layoutmsg, swapwithmaster auto bind = $mainMod Alt, H, layoutmsg, orientationleft bind = $mainMod Alt, J, layoutmsg, orientationbottom bind = $mainMod Alt, K, layoutmsg, orientationtop bind = $mainMod Alt, L, layoutmsg, orientationright # bind = Alt Shift, Tab, layoutmsg, swapnext bind = Alt, Tab, cyclenext bind = Alt Control, TAB, layoutmsg, cycleprev workspaces keybindings\n# Switch workspaces with mainMod + [0-9] bind = $mainMod, 1, workspace, 1 bind = $mainMod, 1, exec, $w1 bind = $mainMod, 2, workspace, 2 bind = $mainMod, 2, exec, $w2 bind = $mainMod, 3, workspace, 3 bind = $mainMod, 3, exec, $w3 bind = $mainMod, 4, workspace, 4 bind = $mainMod, 4, exec, $w4 bind = $mainMod, 5, workspace, 5 bind = $mainMod, 5, exec, $w5 bind = $mainMod, 6, workspace, 6 bind = $mainMod, 6, exec, $w6 bind = $mainMod, 7, workspace, 7 bind = $mainMod, 7, exec, $w7 bind = $mainMod, 8, workspace, 8 bind = $mainMod, 8, exec, $w8 bind = $mainMod, 9, workspace, 9 bind = $mainMod, 9, exec, $w9 bind = $mainMod, 0, workspace, 10 bind = $mainMod, 0, exec, $w10 bind = $mainMod, TAB, workspace, previous bind = $mainMod, BackSpace, workspace, special bind = $mainMod Shift, Backspace, movetoworkspace, special bind = $mainMod Alt, Backspace, togglespecialworkspace # Scroll through existing workspaces with mainMod + scroll bind = $mainMod, mouse_down, workspace, e+1 bind = $mainMod, mouse_up, workspace, e-1 # Move active window to a workspace with mainMod + SHIFT + [0-9] bind = $mainMod SHIFT, 1, movetoworkspace, 1 bind = $mainMod SHIFT, 2, movetoworkspace, 2 bind = $mainMod SHIFT, 3, movetoworkspace, 3 bind = $mainMod SHIFT, 4, movetoworkspace, 4 bind = $mainMod SHIFT, 5, movetoworkspace, 5 bind = $mainMod SHIFT, 6, movetoworkspace, 6 bind = $mainMod SHIFT, 7, movetoworkspace, 7 bind = $mainMod SHIFT, 8, movetoworkspace, 8 bind = $mainMod SHIFT, 9, movetoworkspace, 9 bind = $mainMod SHIFT, 0, movetoworkspace, 10 bind = $mainMod SHIFT, TAB, movetoworkspace, previous monitors movement\nbind = $mainMod Alt, H, focusmonitor, l bind = $mainMod Alt, J, focusmonitor, d bind = $mainMod Alt, K, focusmonitor, u bind = $mainMod Alt, L, focusmonitor, r bind = $mainMod Control, H, movecurrentworkspacetomonitor, l bind = $mainMod Control, J, movecurrentworkspacetomonitor, d bind = $mainMod Control, K, movecurrentworkspacetomonitor, u bind = $mainMod Control, L, movecurrentworkspacetomonitor, r misc\nbind = $mainMod, O, toggleopaque bind = Alt, Tab, alterzorder, top bind = Alt Shift, Tab, bringactivetotop, bind = Alt Control, TAB, bringactivetotop, bind = Alt Control Shift, Tab, bringactivetotop, # lid switch # trigger when the switch is toggled bindl=,switch:Lid Switch,exec,hyprlock # trigger when the switch is turning on #bindl=,switch:on:[switch name],exec,hyprctl keyword monitor \u0026#34;eDP-1, 2560x1600, 0x0, 1\u0026#34; # trigger when the switch is turning off #bindl=,switch:off:[switch name],exec,hyprctl keyword monitor \u0026#34;eDP-1, disable\u0026#34; https://wiki.hyprland.org/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://wiki.hyprland.org/Configuring/Environment-variables/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/hyprland/","summary":"Hyprland is a wlroots-based tiling Wayland compositor written in C++. Noteworthy features of Hyprland include dynamic tiling, tabbed windows, a clean and readable C++ code-base, and a custom renderer that provides window animations, rounded corners, and Dual-Kawase Blur on transparent windows. General usage and configuration is thoroughly documented at Hyprland wiki1.\nStarting Hyprland Hyprland can be started via a display manager (GDM, Lightdm etc), or via the command line (in archlinux it\u0026rsquo;s /usr/bin/Hyprland, notice the capital H).","title":"Hyprland"},{"content":" Figure 1: Notmuch Emacs\nDavmail In my work routines, Microsoft is somewhat unavoidable, and trying to have an email client that can sync Exchange in linux has always been a pain to me. This is my documentation on how to use notmuch, davmail, and msmtp to sync my work emails.\nConfiguration davmail.server=true davmail.mode=Auto davmail.url=https://mail.domain/EWS/Exchange.asmx davmail.defaultDomain=DOMAIN davmail.ssl.nosecurecaldav=false davmail.ssl.nosecureimap=false davmail.ssl.nosecureldap=false davmail.ssl.nosecurepop=false davmail.ssl.nosecuresmtp=false davmail.caldavPort=1081 davmail.imapPort=1144 davmail.ldapPort=1390 davmail.popPort=1111 davmail.smtpPort=1026 davmail.imapAutoExpunge=true davmail.allowRemote=false davmail.logFilePath=/tmp/davmail-domain.log davmail.logFileSize=1MB davmail.disableGuiNotifications=true davmail.disableTrayActivitySwitch=true davmail.showStartupBanner=false davmail.enableKerberos=false Notes davmail.mode set to auto. uses port \u0026gt; 1024 to avoid using root privileges. Also set the davmail.logFilePath to a path that is accessible. davmail.server set to true since I don\u0026rsquo;t need the GUI. All the ssl options is not necessary since it will only be accessed locally. msmtp It\u0026rsquo;s a simple smtp client with fairly complete sendmail compatibility. This is not a full tutorial on how to setup msmtp, there\u0026rsquo;s already much information for that online1.\n# Set default values for all following accounts. defaults auth on tls on tls_trust_file /etc/ssl/certs/ca-certificates.crt logfile /tmp/msmtp.log account exchange host localhost port 1025 tls off tls_starttls off auth plain user DOMAIN\\username from username@domain passwordeval pass domain/username Notes logfile should be accessible (read/write) by the user. account must be unique if there\u0026rsquo;s more than one accounts. tls options should refer to the exchange server. port is defined in davmail. offlineimap [general] accounts = domain maxsyncaccounts = 4 socktimeout = 10 pythonfile = ~/.local/bin/offlineimap-helper.py [Account domain] localrepository = domain-local remoterepository = domain-remote [Repository domain-local] Type = Maildir localfolders = ~/.mail/domain sync_deletes = yes autorefresh = 0.5 quick = 10 keepalive = 240 holdconnectionopen = yes [Repository domain-remote] Type = IMAP remotehosteval = get_credentials(\u0026#34;domain\u0026#34;, \u0026#34;host\u0026#34;) remoteporteval = get_credentials(\u0026#34;domain\u0026#34;, \u0026#34;port\u0026#34;) remoteusereval = get_credentials(\u0026#34;domain\u0026#34;, \u0026#34;user\u0026#34;) remotepasseval = get_credentials(\u0026#34;domain\u0026#34;, \u0026#34;passeval\u0026#34;) maxconnections = 1 ssl = no retrycount = 4 tls_level = tls_no_ssl Notes We\u0026rsquo;ll be using a helper script to determine the host, port, user, and password. offlineimap-helper.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python \u0026#34;\u0026#34;\u0026#34;Offlineimap helper script\u0026#34;\u0026#34;\u0026#34; from subprocess import check_output from os import getenv, path import json JSON_FILE = \u0026#34;credentials.json\u0026#34; if getenv(\u0026#34;XDG_DATA_HOME\u0026#34;) and path.exists(getenv(\u0026#34;XDG_DATA_HOME\u0026#34;) + \u0026#34;/\u0026#34; + \u0026#34;offlineimap\u0026#34;): JSON_PATH = getenv(\u0026#34;XDG_DATA_HOME\u0026#34;) + \u0026#34;/\u0026#34; + \u0026#34;offlineimap\u0026#34; else: JSON_PATH = getenv(\u0026#34;HOME\u0026#34;) + \u0026#34;/\u0026#34; + \u0026#34;.local/share/offlineimap\u0026#34; f = open(JSON_PATH + \u0026#34;/\u0026#34; + JSON_FILE) creds_data = json.load(f) def get_credentials(name, query): for item in creds_data[\u0026#34;accounts\u0026#34;]: if item[\u0026#34;name\u0026#34;] == name: if query == \u0026#34;host\u0026#34;: return item[\u0026#34;host\u0026#34;] elif query == \u0026#34;port\u0026#34;: return item[\u0026#34;port\u0026#34;] elif query == \u0026#34;user\u0026#34;: return item[\u0026#34;user\u0026#34;] elif query == \u0026#34;passeval\u0026#34;: return item[\u0026#34;passeval\u0026#34;] Notes\nThis script will read a json file located at ~/.local/share/offlineimap/credentials.json ~/.local/share/offlineimap/credentials.json 1 2 3 4 5 6 7 8 9 10 11 12 { \u0026#34;accounts\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;domain\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;localhost\u0026#34;, \u0026#34;port\u0026#34;: 1144, \u0026#34;user\u0026#34;: \u0026#34;username\u0026#34;, \u0026#34;passeval\u0026#34;: \u0026#34;somepassword\u0026#34; } ] } Notes: use a strict permission (such as 0700) for this file since password is written in clear text. notmuch [database] path=/home/kristian.alexander/.mail [user] name=Kristian Alexander P primary_email=username@domain [new] tags=new [search] exclude_tags=deleted;spam [maildir] synchronize_flags=true Notes: This file should be generated by the command notmuch setup. notmuch hooks We\u0026rsquo;ll be using two hooks, one is pre-new, which will be sourced whenever notmuch is running. And the other one is post-new, which we\u0026rsquo;ll be sourced after all new emails is synced.\n1 2 #!/usr/bin/env/bash [[ -x $(which offlineimap) ]] \u0026amp;\u0026amp; offlineimap -s This will ensure each time we call notmuch new, it will run offlineimap.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env bash newcount=$(notmuch count tag:new) summary=\u0026#34;Notmuch: ${newcount} new message\u0026#34; if [ $newcount -gt 1 ]; then summary=\u0026#34;${summary}s\u0026#34;; fi if [ $newcount -gt 0 ]; then detail=\u0026#34;$(notmuch search --output=summary --format=json tag:new | sed -e \u0026#39;s/.*authors\u0026#34;: \u0026#34;//;s/|[^\u0026#34;]*\u0026#34;/\u0026#34;/;s/\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;/ : /;s/\u0026#34;.*//\u0026#39;)\u0026#34;; fi notmuch tag -new -- tag:new # See the notmuch pre-hook for DISPLAY thoughts # Desktop notifications if [ $newcount -gt 0 ]; then logger -t notmuch \u0026#34;calling notify-send \u0026#39;$summary\u0026#39; \u0026#39;$detail\u0026#39;\u0026#34; \u0026amp;\u0026amp; notify-send -i /usr/share/icons/Papirus/symbolic/actions/mail-message-new-symbolic.svg \u0026#34;$summary\u0026#34; \u0026#34;$detail\u0026#34;; fi exit 0 cron There\u0026rsquo;s lot of ways to automate the syncing process. systemd-timer is one of them, but since I\u0026rsquo;m an old-school person, I prefer cron.\n1 crontab -l 1 2 3 MAILTO=alexforsale@yahoo.com MAILFROM=alexforsale@yahoo.com */45 * * * * notmuch new Other With all the processes above, we could use other mail clients like thunderbird or geary.\nhttps://wiki.archlinux.org/title/msmtp\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://alexforsale.github.io/posts/notmuch-mail-emacs/","summary":"Figure 1: Notmuch Emacs\nDavmail In my work routines, Microsoft is somewhat unavoidable, and trying to have an email client that can sync Exchange in linux has always been a pain to me. This is my documentation on how to use notmuch, davmail, and msmtp to sync my work emails.\nConfiguration davmail.server=true davmail.mode=Auto davmail.url=https://mail.domain/EWS/Exchange.asmx davmail.defaultDomain=DOMAIN davmail.ssl.nosecurecaldav=false davmail.ssl.nosecureimap=false davmail.ssl.nosecureldap=false davmail.ssl.nosecurepop=false davmail.ssl.nosecuresmtp=false davmail.caldavPort=1081 davmail.imapPort=1144 davmail.ldapPort=1390 davmail.popPort=1111 davmail.smtpPort=1026 davmail.imapAutoExpunge=true davmail.allowRemote=false davmail.logFilePath=/tmp/davmail-domain.log davmail.logFileSize=1MB davmail.","title":"Using Emacs as an email client"},{"content":"About Kristian Alexander P Profile I\u0026rsquo;m currently working as an IT Support at Multi Kontrol Nusantara since October 2022. My responsibilities are mainly about installing and configuring computers / laptops, and various other hardwares, monitoring and also maintaining them. I\u0026rsquo;m also running a small networking service, providing internet connection from house to house, the main reason I\u0026rsquo;m doing this is mainly to put my Gnu/Linux knowledge to use for managing all the necessary services which I do so manually.\nPersonal Infos Web Spaces\nhttps://alexforsale.github.io https://alexforsale.gitlab.io Instant Messaging\nTelegram: https:/t.me/alexforsale Skills Experience in Linux, FreeBSD, and Microsoft Windows administration, installation, and maintenance. Installation and configuration of webserver / proxy such as Apache, nginx and haproxy on Linux and FreeBSD. Installation and configuration of Linux and BSD system as a router or internet gateway, eliminating the need for premade / proprietary routers such as Mikrotik or PfSense. Troubleshooting skills with network protocols such as DNS, TCP/IP, and SMTP. Administration of networking devices such as routers, and switches. Experience in writing basic Shell Scripts using ksh, bash, and zsh for process automation of application, backup and scheduling. Knowledge in Storage, Disk Management, Logical Volume Management(LVM) and logical partitioning. Basic knowledge in Vim and Emacs. Source code management with git to track progress of any development work, viewing version histories and creating version branches. Git version control with github and gitlab, also local hosting with Gitea. Containerization software with Docker, QEMU, and VirtualBox. Configuration management with ansible. Management of user accounts, system security, and performance tuning. Quick learner. Educational Background 2000 – 2005 : University of Krisnadwipayana, Jakarta 1999 – 1996 : SMU Negeri 3, Bekasi 1996 – 1993 : SLTP Negeri 10, Bekasi Employment History Multi Kontrol Nusantara\nIT Support Jakarta\n10/2022 - Present Installing and configuring computer hardware, software, systems, networks, printers and scanners Monitoring and maintaining computer systems and networks Responding in a timely manner to service issues and requests Providing technical support across the company (this may be in person or over the phone) Setting up accounts for new users Repairing and replacing equipment as necessary Testing new technology Java Komputindo\nComputer Technician\n9/2020 - 2/2021 OS installation for desktop and laptop systems (MS Windows, Gnu/linux, *BSD, and MacOS). Provides IT support and/or consultation to customers. Yummy Foodcourt\nCaptain\n2/2017 to 7/2017 Supervising daily operations. Take an active role in coaching and developing junior staffs. Completes the daily responsibilities that are set for each individual shifts. Any other duties related to food and beverage services assigned by the manager. Damco Indonesia\nCustomer Service Representative Jakarta\n4/2013 to 7/2013 Respond to telephone inquiries, providing quality service to customers and associates inquiring about the availability of products or status of orders. DHL Supply Chains\nCustomer Service Representative Jakarta\n8/2011 to 4/2013 Respond to telephone inquiries, providing quality service to customers and associates inquiring about the availability of products or status of orders. Juishin Indonesia\nAdministrative Assistant Jakarta\n9/2008 to 1/2011 Maintaining sales and inventory report for region branches. Assisting Area Manager on daily administrative duties. Marketing Administrative Staff Medan\n11/2014 to 12/2016 Maintaining daily administrative tasks. Maintaining sales and inventory report for Medan branch. Telkomsel\nCall Center Inbound Agent Jakarta\n8/2008 to 8/2009 Respond to telephone inquiries, providing quality service to customers inquiring about various product informations. ","permalink":"https://alexforsale.github.io/about/","summary":"About Kristian Alexander P Profile I\u0026rsquo;m currently working as an IT Support at Multi Kontrol Nusantara since October 2022. My responsibilities are mainly about installing and configuring computers / laptops, and various other hardwares, monitoring and also maintaining them. I\u0026rsquo;m also running a small networking service, providing internet connection from house to house, the main reason I\u0026rsquo;m doing this is mainly to put my Gnu/Linux knowledge to use for managing all the necessary services which I do so manually.","title":""}]