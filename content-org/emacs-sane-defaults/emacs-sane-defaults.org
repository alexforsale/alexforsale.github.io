#+options: ':nil -:nil ^:{} num:nil toc:nil
#+author: Kristian Alexander P
#+creator: Emacs 29.2 (Org mode 9.6.15 + ox-hugo)
#+hugo_section: posts
#+hugo_base_dir: ../../
#+date: <2024-02-22 Thu>
#+title: Emacs sane defaults
#+description: Finding comfort in Emacs
#+hugo_tags: emacs configuration
#+hugo_categories: emacs
#+startup: inlineimages

#+caption: Default Emacs
[[./default-emacs.png][file:default-emacs.png]]

The default /Emacs/ is kinda boring and unintuitive, if you're looking for a simple text editor, I really suggest other editors like /nano/, /vim/, or other graphical editors like /gedit/. The main advantage of using /Emacs/ is that in can be more than just a text editor.

#+caption: Tetris inside Emacs
[[./emacs-tetris.png][file:emacs-tetris.png]]

I don't think anybody ever want to play tetris inside /Emacs/, but it's there!

#+caption: Emacs as a file manager
[[./emacs-dired.png][file:emacs-dired.png]]

The /dired-mode/ enable us to "edit directory" (DIRectory EDitor), delete, rename, print etc.

#+caption: terminal in Emacs
[[./emacs-eshell.png][file:emacs-eshell.png]]

/Eshell/ is a shell-like interpreter implemented in /Emacs Lisp/.

So, without any configuration, /Emacs/ is very usable. But first we need to know the basic.
* The Basic
** terminology
| emacs  | rest of the world |
| frame  | program window    |
| window | pane              |
| buffer | file              |
| kill   | cut               |
| yank   | paste             |
| region | selection         |
** Screen organization
*** Point
Basically, the cursor. By default, it is a solid block, the point appear /on/ a character, but actually situated /before/ the character under the cursor.
*** The echo area
The line at the very bottom of the frame, useful for displaying /error messages/ or other informative messages.
*** The modeline
Located at the bottom of each window describing what's going on in the current buffer. If there's only one window, the mode line appears above the echo area; it is next-to-last in the frame.
*** Menu bar
Located at the top of each frame.
** Keys
Keyboard shortcuts, for examples:
#+begin_example
M-x tetris
#+end_example
=M= stands for ~Alt~, so press and hold =Alt=, press =x=, release and type =tetris= and press ~Enter~.
#+begin_example
C-x C-f /path/to/some/file
#+end_example
=C= stands for ~Control~, so press and hold ~CTRL~, release, and press and hold ~CTRL~, press =f=, release, and type some path to a file.
** Modes
Each buffer is associated with something called =major mode=, and may have one or more active =minor modes=. Modes are sets of specific rules and/or keybindings for some buffers. There are read-only mode that forbid you from editing a buffer, there's also language-specific modes for programming languages.
To get a detailed description for the current buffer:
#+begin_example
C-h m
#+end_example

To get all the available keybindings in the current buffer/mode:
#+begin_example
C-h b
#+end_example
** Tutorial
This will get you started with /Emacs/, open the tutorial buffer with:
#+begin_example
C-h t
#+end_example
* Configuration file
The configuration file itself is written in /Emacs Lisp/. The default location is traditionally in ~~/.emacs~, although /Emacs/ will also look at ~~/.emacs.el~, ~/.emacs.d/init.el~, and ~~/.config/emacs/init.el~. Though if you put your configuration files in ~~/.config/emacs~ directory, be aware that it will not used if ~~/.emacs~ file or ~~/.emacs.d/~ directory already exists,
* Some useful sane defaults
** =use-short-answer=
Use short answer for each confirmation ("y" or "n", instead of "yes" or "no").
#+begin_src emacs-lisp
(setq-default use-short-answers t)
#+end_src
** disable menu / tool / scroll bar
Useful if you're already comfortable with the keyboard-centric workflow, and you want to expand the buffer as much as possible.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** disable splash-screen
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
** Disable =use-file-dialog=
#+begin_src emacs-lisp
(setq use-file-dialog nil)
#+end_src
Since we don't use the GUI (menu and toolbar).
** resize windows pixelwise
This affect /split-window/, /maximize-window/, /minimize-window/, /fit-window-to-buffer/, and /fit-frame-to-buffer/.
#+begin_src emacs-lisp
(setq window-resize-pixelwise t)
#+end_src
** resize frame pixelwise
Neccessary if you're using window-managers.
#+begin_src emacs-lisp
(setq frame-resize-pixelwise t)
#+end_src
** Ask for confirmatino when exiting /Emacs/
The default is don't ask for confirmation (nil)
#+begin_src emacs-lisp
(setq confirm-kill-emacs #'yes-or-no-p)
#+end_src
** enable save-place-mode
Save the point to the last place when the buffer is previously visited.
#+begin_example
(setq save-place-mode t)
#+end_example
** enable savehist-mode
Save the minibuffer history.
#+begin_src emacs-lisp
(savehist-mode t)
#+end_src
** separate Customization file elsewhere
By default this file is appended to the init file, which usually not desired.
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
this snippet will ensure the file is separated and loaded when starting /Emacs/.
** Ignore case in completion
#+begin_src emacs-lisp
  (setq read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t
        completion-ignore-case t)
#+end_src
** enable global auto-revert-mode
This mode enable auto-revert buffer when the file on the disk changes.
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
*** also enable it for non-file buffers
#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
#+end_src
This way, both file buffers and buffers with a custom =revert-buffer-function= will be auto-reverted.
*** Don't generate message when auto-reverting
#+begin_src emacs-lisp
  (setq auto-revert-verbose nil)
#+end_src
** electric-pair-mode
This mode is useful when editing /Emacs Lisp/ buffer, we'll enable this on every programming mode (prog-mode) via hook:
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (electric-pair-mode 1)))
#+end_src
** Use clipboard for cutting and pasting
#+begin_src emacs-lisp
(setq select-enable-clipboard t)
#+end_src
** Delete to trash
Specifies whether to use the system's trash can.
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src
** Automatic Compression
#+begin_src emacs-lisp
  (setq auto-compression-mode t)
#+end_src
Opening compressed file (zipped etc), will automatically uncompressed for reading, and compressed when writing.
** enable font-lock-mode
This will enable syntax-highlighting and coloring.
#+begin_src emacs-lisp
  (global-font-lock-mode t)
#+end_src
** recent file
#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src
** prefer spaces than tabs
#+begin_src emacs-lisp
  (set-default 'indent-tabs-mode nil)
#+end_src
** visualize empty lines
#+begin_src emacs-lisp
  (set-default 'indicate-empty-lines t)
#+end_src
** Ease CamelCase word navigation
#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src
This way =editPost= is considered a two word.
** disable electric-indent-mode
#+begin_src emacs-lisp
(setq electric-indent-mode nil)
#+end_src
* Early init
This file is processed before ~init.el~, must be named ~early-init.el~ and located in the same directory as the ~init.el~. Example customization that should be placed here are:
- Custom package management (this is loaded before the default /package/).
I use this for early UI setup:
#+begin_src emacs-lisp
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src
* After Configuration
#+caption: After configuring
[[./emacs-after.png][file:emacs-after.png]]
* Useful links
** Configuration generator
[[https://emacs.amodernist.com/][for those tldr users]].
** Emacs wiki
https://www.emacswiki.org/
** [[https://www.gnu.org/software/emacs/][Gnu Emacs Homepage]]
** [[https://www.gnu.org/software/emacs/tour/index.html][GNU Emacs tour]]
** [[https://sachachua.com/blog/category/emacs-news/][Emacs news]]
