#+options: ':nil -:nil ^:{} num:nil toc:nil
#+author: Kristian Alexander P
#+creator: Emacs 29.2 (Org mode 9.6.15 + ox-hugo)
#+hugo_section: posts
#+hugo_base_dir: ../../
#+date: <2024-02-23 Thu>
#+title: Emacs vertico
#+description: VERTical Interactive COmpletion
#+hugo_tags: emacs configuration vertico
#+hugo_categories: emacs
#+startup: inlineimages
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The focus of Vertico is to provide a UI which behaves correctly under all circumstances. By reusing the built-in facilities system, Vertico achieves full compatibility with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extendable and modular. Additional enhancements are available as extensions or complementary packages. The code base is small and maintainable. The main vertico.el package is only about 600 lines of code without white space and comments[fn:1].

* Installation
#+caption: emacs without vertico
[[./emacs-without-vertico.png][file:emacs-without-vertico.png]]
#+caption: emacs with vertico
[[./emacs-vertico.png][file:emacs-vertico.png]]
** With =use-package=
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)
    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)
    ;; Show more candidates
    ;; (setq vertico-count 20)
    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)
    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src
*** vertico configuration
- ~vertico-scroll-margin~ :: Number of lines at the top and bottom when scrolling (default to 2).
- ~vertico-count~ :: Maximal number of candidates to show (default to 10).
- ~vertico-resize~ :: How to resize the =vertico= minibuffer window (default to the value of =resize-mini-windows=, which is ='grow-only=).
- ~vertico-cycle~ ::  enable cycling for =vertico-next= and =vertico-previous=, default to =nil=.
* Extensions
The package also includes some extensions, they're installed automatically if using package from =ELPA=.
** =vertico-flat=
Flat, horizontal display for =vertico=, enable it with ~M-x vertico-flat-mode~.
#+caption: vertico-flat-mode
[[./vertico-flat-mode.png][file:vertico-flat-mode.png]]
** =vertico-buffer=
=vertico-buffer-mode= to display Vertico like a regular buffer.
#+caption: vertico-buffer-mode
[[./vertico-buffer-mode.png][file:vertico-buffer-mode.png]]
** =vertico-directory=
Commands for Ido-like directory navigation. The commands can be bound in the =vertico-map=. Furthermore a cleanup function for shadowed file paths is provided.
#+begin_src emacs-lisp
  (keymap-set vertico-map "RET" #'vertico-directory-enter)
  (keymap-set vertico-map "DEL" #'vertico-directory-delete-char)
  (keymap-set vertico-map "M-DEL" #'vertico-directory-delete-word)
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
#+end_src
this way when opening file (via ~C-x C-f~ or with ~M-x find-file~), pressing ~Backspace~ (or ~DEL~), will automatically remove one directory up.
** =vertico-grid=
Enables grid-display.
#+caption: vertico-grid-mode
[[./vertico-grid-mode][file:vertico-grid-mode.png]]
** =vertico-indexed-mode=
Select indexed candidates with prefix arguments.
#+caption: vertico-indexed-mode
[[./vertico-indexed-mode][file:vertico-indexed-mode.png]]
Select the candidate number with ~M-<candidate>~, for example: to select candidate =2= press ~M-2 RET~.
** =vertico-mouse=
Support for scrolling and candidate selection.
** =vertico-unobstrusive-mode=
Display only the topmost candidate. It is a simple derivative of =vertico-flat-mode=.
** =vertico-suspend=
Suspend the current Vertico completion session. If =vertico-suspend= is called from within the currently active Vertico minibuffer, the completion session is suspended.  Otherwise the last session is restored.  It is possible to suspend multiple nested Vertico sessions.  Note that =vertico-suspend= requires that recursive minibuffers are enabled by setting the customizable variable =enable-recursive-minibuffers= to =t=.
** =vertico-reverse=
Reverse the list of candidates.
#+caption: vertico-reverse-mode
[[./vertico-reverse-mode.png][file:vertico-reverse-mode.png]]
** =vertico-repeat=
Enables repetition of Vertico sessions via the =vertico-repeat=, =vertico-repeat-previous= and =vertico-repeat-select= commands.  If the repeat commands are called from an existing Vertico minibuffer session, only sessions corresponding to the current minibuffer command are offered via completion.

It is necessary to register a minibuffer setup hook, which saves the Vertico state for repetition.  In order to save the history across Emacs sessions, enable =savehist-mode= and add =vertico-repeat-history= to =savehist-additional-variables=.
#+begin_src emacs-lisp
  (add-to-list 'savehist-additional-variables 'vertico-repeat-history)
  (keymap-global-set "M-R" #'vertico-repeat)
  (keymap-set vertico-map "M-P" #'vertico-repeat-previous)
  (keymap-set vertico-map "M-N" #'vertico-repeat-next)
  (keymap-set vertico-map "S-<prior>" #'vertico-repeat-previous)
  (keymap-set vertico-map "S-<next>" #'vertico-repeat-next)
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
#+end_src
** =vertico-quick=
Similar to =vertico-indexed-mode=, which prefixes candidates with quick keys.  Typing these quick keys allows you to select the candidate in front of them.  This is designed to be a faster alternative to selecting a candidate with =vertico-next= and =vertico-previous=.
#+begin_src emacs-lisp
  (keymap-set vertico-map "M-q" #'vertico-quick-insert)
  (keymap-set vertico-map "C-q" #'vertico-quick-exit)
#+end_src
#+caption: vertico-quick
[[./vertico-quick.png][file:vertico-quick.png]]
Pressing ~M-q~ while in =vertico-map= will show all the candidates, pressing ~C-q~ will exit the candidate selection.
** =vertico-multiform=
Perhaps the most complex extensions, used for fine tuning the Vertico display and other minibuffer modes per command or completion category.  For some commands you may want to use the =vertico-buffer= display and for completion categories like file you prefer the =vertico-grid-mode=.
#+begin_src emacs-lisp
  (setq vertico-multiform-commands
        '((consult-line buffer)
          (consult-imenu reverse buffer)
          (execute-extended-command flat)))
  (setq vertico-multiform-categories
        '((file buffer grid)
          (imenu (:not indexed mouse))
          (symbol (vertico-sort-function . vertico-sort-alpha))))
  (vertico-multiform-mode)
#+end_src
* Marginalia
This package provides =marginalia-mode= which adds marginalia to the minibuffer completions. [[https://en.wikipedia.org/wiki/Marginalia][Marginalia]] are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates. Marginalia can only add annotations to the completion candidates. It cannot modify the appearance of the candidates themselves, which are shown unaltered as supplied by the original command[fn:2].
** Installation
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
#+caption: Marginalia on find-file
[[./marginalia-files.png][file:marginalia-files.png]]

#+caption: Marginalia on describe-variable
[[./marginalia-describe-variable.png][file:marginalia-describe-variable.png]]
** Adding Icons in the minibuffer
With additional package: [[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]] or [[https://github.com/rainstormstudio/nerd-icons-completion][nerd-icons-completion]].
#+caption: nerd-icons-completion
#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :config
    (nerd-icons-completion-mode))
#+end_src

#+caption: all-the-icons-completion
#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src

#+caption: marginalia with nerd-icons-completion
[[./marginalia-find-file-with-icons.png][file:marginalia-find-file-with-icons.png]]
* Orderless
This package provides an =orderless= completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order. Each component can match in any one of several ways: literally, as a regexp, as an initialism, in the flex style, or as multiple word prefixes. By default, regexp and literal matches are enabled[fn:3].
** Installation
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

#+caption: orderless using the wiki completion-styles
[[./orderless-default.png][file:orderless-default.png]]
* Consult
Consult provides search and navigation commands based on the Emacs completion function [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]]. Completion allows you to quickly select an item from a list of candidates. Consult offers asynchronous and interactive =consult-grep= and =consult-ripgrep= commands, and the line-based search command =consult-line=. Furthermore Consult provides an advanced buffer switching command =consult-buffer= to switch between buffers, recently opened files, bookmarks and buffer-like candidates from other sources. Some of the Consult commands are enhanced versions of built-in Emacs commands. For example the command =consult-imenu= presents a flat list of the Imenu with [[https://github.com/minad/consult#live-previews][live preview]], [[https://github.com/minad/consult#narrowing-and-grouping][grouping and narrowing]]. Please take a look at the [[https://github.com/minad/consult#available-commands][full list of commands]][fn:4].
** Installation
#+begin_src emacs-lisp
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)
  ;; The :init configuration is always executed (Not lazy)
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config
  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))
  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"
  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)
  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
#+end_src
#+caption: consult-buffer
[[./consult-buffer.png][file:consult-buffer.png]]

#+caption: consult-flymake
[[./consult-flymake.png][file:consult-flymake.png]]

#+caption: consult-yank-pop
[[./consult-yank-pop.png][file:consult-yank-pop.png]]

#+caption: consult-outline
[[./consult-outline.png][file:consult-outline.png]]
* Corfu
Corfu enhances in-buffer completion with a small completion popup. The current candidates are shown in a popup below or above the point. The candidates can be selected by moving up and down. Corfu is the minimalistic in-buffer completion counterpart of the [[https://github.com/minad/vertico][Vertico]] minibuffer UI[fn:5].
** Installation
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
#+end_src

#+caption: corfu completion
[[./corfu-completion.png][file:corfu-completion.png]]

By default, when typing, press ~TAB~ to start the completion, use ~C-p~ or ~C-n~ (~C-j~ or ~C-k~ can also be used).
** Enable completion in the minibuffer
#+begin_src emacs-lisp
(defun corfu-enable-always-in-minibuffer ()
  "Enable Corfu in the minibuffer if Vertico/Mct are not active."
  (unless (or (bound-and-true-p mct--active)
              (bound-and-true-p vertico--input)
              (eq (current-local-map) read-passwd-map))
    ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
#+end_src
This will enable corfu as long as there's no other completion active.
** nerd-icons-corfu
Nerd-icons-corfu.el is a library for adding icons to completions in [[https://github.com/minad/corfu][Corfu]]. It uses [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons.el]] under the hood and, as such, works on both GUI and terminal[fn:6].
#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :ensure
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
  (setq nerd-icons-corfu-mapping
      '((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
        (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
        ;; ...
        (t :style "cod" :icon "code" :face font-lock-warning-face))))
#+end_src
#+caption: nerd-icons-corfu
[[./nerd-icons-corfu.png][file:nerd-icons-corfu.png]]

* Footnotes

[fn:1] https://github.com/minad/vertico
[fn:2] https://github.com/minad/marginalia
[fn:3] https://github.com/oantolin/orderless
[fn:4] https://github.com/minad/consult
[fn:5] https://github.com/minad/corfu
[fn:6] https://github.com/LuigiPiucco/nerd-icons-corfu
